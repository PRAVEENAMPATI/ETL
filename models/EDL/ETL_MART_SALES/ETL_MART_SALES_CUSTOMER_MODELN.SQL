/*---------------------------------------------------------------------------
Command to run model:
--dbt build --select ETL_MART_SALES_CUSTOMER_MODELN

Version     Date            Author               Description
-------     --------        -----------          ----------------------------------
1.0         01/23/2023      Vinay Subramanian    Initial Version
2.0         02/16/2023      Vinay Subramanian    Added BIll and Ship address columns
3.0         04/17/2023      Rishi Kumar OLa    Added logic to proces active records from modeln
---------------------------------------------------------------------------*/
{################# EDW Job Template Variables #################}
{%-set v_pk_list = ['CUSTOMER_CODE']-%}
{% if is_incremental() %}
{%-set v_house_keeping_column = ['BIW_INS_DTTM','BIW_UPD_DTTM','BIW_BATCH_ID','BIW_MD5_KEY']-%}
{%-set v_all_column_list =  edw_get_column_list( this ) -%}
{%-set v_update_column_list =  edw_get_quoted_column_list( this ,v_pk_list|list + ['BIW_INS_DTTM']|list) -%}
{%-set v_md5_column_list =  edw_get_md5_column_list( this ,v_pk_list|list+ v_house_keeping_column|list ) -%}
--DBT Variable
--SELECT {{v_all_column_list}}
--SELECT {{v_update_column_list}}
--SELECT {{v_md5_column_list}}
{% endif %}

{################# Batch control insert and update SQL #################}
{%- set v_dbt_job_name = 'DBT_ETL_MART_SALES_CUSTOMER_MODELN'-%}
-- Step 1 Batch process info
{%- set v_watermark = edw_batch_control(v_dbt_job_name,config.get('schema'),config.get('alias') ,config.get('tags'),config.get('materialized') ) -%}
{%- set V_LWM = v_watermark[0] -%}
{%- set V_HWM = v_watermark[1] -%}
{%- set V_START_DTTM = v_watermark[2] -%}
{%- set V_BIW_BATCH_ID = v_watermark[3] -%}
{%- set v_sql_upd_success_batch = "CALL UTILITY.EDW_BATCH_SUCCESS_PROC('"~v_dbt_job_name~"')" -%}


{{
    config(
         description = 'Building etl table CUSTOMER for sales mart '
        ,transient=true
        ,materialized='table'
        ,schema ='ETL_MART_SALES'
        ,alias='CUSTOMER_MODELN'
        ,tags ='MART_SALES'
        ,post_hook= [v_sql_upd_success_batch]
        )
}}

WITH 
STG_XXON_CORP AS (
    SELECT 
    CORP_CODE AS CORPORATION_CODE,
    CORP_DESC AS  CORPORATION_DESCRIPTION,
    NVL(customer_category_code,'CAT4') AS CORPORATION_CATEGORY_CODE,
    CASE WHEN customer_category_code IS NULL THEN 'Foundation' ELSE category_description END  AS CORPORATION_CATEGORY_DESCRIPTION
    FROM 
    {{ source('STG_EBS_APPS', 'XXON_OM_CORP_DETAILS_V') }}   
    QUALIFY( ROW_NUMBER() OVER (PARTITION BY CORP_CODE ORDER BY BIW_UPD_DTTM DESC)=1)
)

,STG_MODELN_CUSTOMER AS (
    SELECT
    OID AS CRM_CUSTOMER_OID,
    ACCOUNT_NUM AS ACCOUNT_NUM, -- WE HAVE DUPLICATE ON ACCOUNT NAME
    STATUS AS CRM_STATUS,
    CUSTOM_FIELD37 AS END_USE_CODE,
    CUSTOM_FIELD31 AS END_USE_DESCRIPTION,
    CUSTOM_FIELD39 AS SALES_STRUCTURE,
    CUSTOM_FIELD43,
    CUSTOM_FIELD29 as ERP_STATUS,
    UPPER(coalesce(LEGAL_NAME,DISPLAY_NAME)) as CUSTOMER_NAME,
    CUSTOM_FIELD33 as CUSTOMER_SOURCE,
    CUSTOM_FIELD36 as BUSINESS_CLASS_CODE,
    CUSTOM_FIELD3 as END_CORPORATION_CODE,
    'N' HAS_APPROVAL,
    CREATED_BY as CREATE_BY_ID,
    CREATED_DATE as CREATE_DTTM,
    MODIFIED_BY as LAST_UPDATE_BY_ID,
    MODIFIED_DATE as LAST_UPDATE_DTTM,
    null IS_DELETED,
    CUSTOM_FIELD21 as DIVISION,
    -- Join columns
    PARENT_CUSTOMER_OID,
    SEGMENT_OID,
    CUSTOMER_LEVEL_OID,
    DEFAULT_SHIP_TO_ADDRESS_OID,
    CURRENCY_INFO_OID,
    BILL_TO_ADDRESS_OID,
	OBSOLETE_FLAG
    FROM 
    {{ source('STG_MODELN_PRICING_OWNER', 'CUSTOMER') }}
    QUALIFY( ROW_NUMBER() OVER (PARTITION BY ACCOUNT_NUM ORDER BY MODIFIED_DATE DESC, OID DESC)=1)
)

,STG_MODELN_SEG AS (
    SELECT
    OID AS OID,
    DISPLAY AS MARKET_SEGMENT_CODE
    FROM 
    {{ source('STG_MODELN_PRICING_OWNER', 'SEGMENT') }}
    QUALIFY( ROW_NUMBER() OVER (PARTITION BY DISPLAY ORDER BY BIW_UPD_DTTM DESC)=1)
)

,STG_ORG_CUST_MAP AS(
    select
    customer_oid ,
    org_oid
    from 
    {{ source('STG_MODELN_PRICING_OWNER', 'ORG_CUST_MAPPING') }}   
    -- Is_primary filter picks the recent data.
    where is_primary =1 
    QUALIFY( ROW_NUMBER() OVER (PARTITION BY customer_oid ORDER BY org_oid DESC)=1)
)

,STG_ORG as (
    SELECT
    OID AS OID,
    CODE AS ORG_CODE   
    FROM 
    {{ source('STG_MODELN_PRICING_OWNER', 'ORG') }}   
    WHERE
    lower(STATUS) = 'active' AND 
    IS_ORG_CUST_MAP =1 AND 
    OBSOLETE_FLAG=0
    QUALIFY( ROW_NUMBER() OVER (PARTITION BY NAME ORDER BY BIW_UPD_DTTM DESC)=1)
) 

,STG_MODELN_TERRITORY AS
(
    SELECT
    ORG_CODE AS SALES_ORGANIZATION_CODE,
	REGION_CODE AS SALES_REGION_CODE
    FROM 
   {{ source('STG_MODELN_PRICING_ADMIN', 'SALES_TERRITORY') }}
    QUALIFY( ROW_NUMBER() OVER (PARTITION BY ORG_CODE ORDER BY BIW_UPD_DTTM DESC)=1)
)

,STG_MODELN_CNTRY_MAP AS
(
    SELECT
    COUNTRY_CD,
	COUNTRY,
    CSSOP_REGION_CD,
    ISO_COUNTRY_CD
    FROM 
   {{ source('STG_MODELN_PRICING_ADMIN', 'COUNTRY_MAP') }}
    QUALIFY( ROW_NUMBER() OVER (PARTITION BY COUNTRY_CD ORDER BY BIW_UPD_DTTM DESC)=1)
)

,STG_PRO_USER AS(
    SELECT
    OID,
    USERID,
    FIRST_NAME,
    LAST_NAME,
    EMAIL,
    PHONE,
    MODIFIED_BY,
    CREATED_BY
    FROM 
   {{ source('STG_MODELN_PRICING_ADMIN', 'PRO_USER') }}
      --Added filter to fetch only active user id and details
    where lower(STATUS) = 'active'
    QUALIFY( ROW_NUMBER() OVER (PARTITION BY OID ORDER BY BIW_UPD_DTTM DESC)=1)
)
-- We are using LOC_DW_OUT as two alise 
    --1. with udc_spa_cd is not null
    --2. without udc_spa_cd filter
,STG_LOC_DW_OUT AS(
    SELECT
    LOC,
    UDC_FCST_TYPE AS FORECAST_TYPE_CODE,
    UDC_GENERIC_PROG_DESC AS UDC_GENERIC_PROG_DESCRIPTION,
    UPPER(UDC_LOC_STATUS) AS UDC_LOC_STATUS,
    UPPER(SUBSTR(UDC_GENERIC_PROG_DESCRIPTION, 1, POSITION( ' ',UDC_GENERIC_PROG_DESCRIPTION)-1)) AS SERVICE_TYPE_CODE,    
    UDC_SPA_CD
    FROM 
   {{ source('STG_FMS_FMS_OWNER', 'STG_LOC_DW_OUT') }}
    QUALIFY( ROW_NUMBER() OVER (PARTITION BY LOC ORDER BY BIW_UPD_DTTM DESC)=1)
)

, STG_MODELN_ADDRESS AS (
    SELECT  
        OID,
        COUNTRY, 
        ADDRESS1,
        ADDRESS2,
        ADDRESS3,
        ADDRESS4,
        ZIP AS POSTAL_CODE,
        CITY,
        'SHIP' AS ADDRESS_TYPE,
        STATE
    FROM 
    {{ source('STG_MODELN_PRICING_OWNER', 'ADDRESS') }}
    QUALIFY( ROW_NUMBER() OVER (PARTITION BY oid ORDER BY MODIFIED_DATE DESC, BIW_UPD_DTTM desc )=1)
)

, STG_MODELN_CURRENCY_INFO AS (
    SELECT  OID,
            ISO_CODE,
            CODE    
    FROM 
    {{ source('STG_MODELN_PRICING_OWNER', 'CURRENCY_INFO') }}
    QUALIFY( ROW_NUMBER() OVER (PARTITION BY CODE ORDER BY BIW_UPD_DTTM desc ,MODIFIED_DATE DESC)=1)   
)

, STG_MAINFRAME_CURRENCY AS (
    SELECT  CURRENCY_CD,
            ISO_CURRENCY_CD 
    FROM 
    {{ source('STG_MAINFRAME', 'CURRENCY') }}
    QUALIFY( ROW_NUMBER() OVER (PARTITION BY CURRENCY_CD ORDER BY BIW_UPD_DTTM DESC)=1)   
)

,CUSTOMER_EBS AS (
    SELECT 
        CUST_CODE AS CUSTOMER_CODE
    FROM 
    {{ source('STG_EBS_APPS', 'XXON_OM_CUSTOMER_DETAILS_V') }}   
    WHERE SITE_STATUS_CODE='A'
    QUALIFY( ROW_NUMBER() OVER (PARTITION BY CUST_CODE ORDER BY BIW_UPD_DTTM DESC)=1)
) 

,XXON_OM_CUSTOMER_ADDRESS_V AS (
    SELECT 
        LOCATION AS CUSTOMER_CODE,
        ADDRESS_TYPE,
        ADDRESS1,
        ADDRESS2,
        ADDRESS3,
        ADDRESS4,
        CITY,
        STATE,
        COUNTRY AS COUNTRY_CODE,
        COUNTRY_DESC AS COUNTRY_NAME,
        POSTAL_CODE
    FROM
    {{ source('STG_EBS_APPS', 'XXON_OM_CUSTOMER_ADDRESS_V') }} 
     QUALIFY( ROW_NUMBER() OVER (PARTITION BY LOCATION,ADDRESS_TYPE ORDER BY BIW_UPD_DTTM DESC)=1)
)

SELECT 
    MDLN_CUST.ACCOUNT_NUM AS CUSTOMER_CODE,
    MDLN_CUST.ERP_STATUS,
    MDLN_CUST.CRM_CUSTOMER_OID,
    MDLN_CUST.CRM_STATUS,
    MDLN_CUST.CUSTOMER_NAME,
    MDLN_CUST.CUSTOMER_SOURCE,
    MDLN_CUST.BUSINESS_CLASS_CODE, 
    MDLN_CUST_PARENT.ACCOUNT_NUM AS CORPORATION_CODE,
    CORP.CORPORATION_DESCRIPTION,
    MDLN_CUST.END_CORPORATION_CODE,
    END_CORP.CORPORATION_DESCRIPTION AS END_CORPORATION_DESCRIPTION,
    SALES.SALES_ORGANIZATION_CODE,
    MDLN_CUST.END_USE_CODE,
    MDLN_CUST.END_USE_DESCRIPTION,
    MDLN_CURRENCY_INFO.CODE AS CURRENCY_CODE,
    MAINFRAME_CURRENCY.CURRENCY_CD AS ISO_CURRENCY_CODE,
    MDLN_CUST.HAS_APPROVAL::BOOLEAN AS HAS_APPROVAL,
    MDLN_CNTRY_MAP.CSSOP_REGION_CD AS ORDER_PROCESSING_REGION_CODE,
    NUll CORPORATION_CATEGORY_CODE,
    NUll CORPORATION_CATEGORY_DESCRIPTION,
    CASE WHEN MDLN_CUST_PARENT.ACCOUNT_NUM IN ( 'OOOO', 'SPPP', 'XDDD') OR MDLN_CUST_PARENT.ACCOUNT_NUM IS NULL 
        THEN MDLN_CUST.CUSTOMER_NAME
        ELSE CORP.CORPORATION_DESCRIPTION 
    END AS CUSTOMER_ENTITY_CODE,
    LOC_DW_OUT.UDC_GENERIC_PROG_DESCRIPTION ,
    MDLN_CUST.CREATE_BY_ID,
    MDLN_CUST.CREATE_DTTM,
    MDLN_CUST.LAST_UPDATE_BY_ID,
    MDLN_CUST.LAST_UPDATE_DTTM,
    MDLN_CUST.IS_DELETED,
    MDLN_CUST.DIVISION,
    MDLN_CUST.SALES_STRUCTURE,
    MDLN_SEG.MARKET_SEGMENT_CODE, 
    SUBSTRING(MDLN_CUST_PARENT.ACCOUNT_NUM,1,3)||DECODE(SALES.SALES_REGION_CODE,'AMR','N','GCHN','A',SUBSTRING(SALES.SALES_REGION_CODE,1,1)) COF_CODE,
    MDLN_CUST_PARENT.ACCOUNT_NUM COG_CODE,
    -- ROLE FSE
    FSE_CNTCT.USERID AS FSE_USER_ID,
    FSE_CNTCT.FIRST_NAME AS FSE_FIRST_NAME,
    FSE_CNTCT.LAST_NAME AS FSE_LAST_NAME,
    FSE_CNTCT.EMAIL AS FSE_EMAIL,
    FSE_CNTCT.PHONE AS FSE_PHONE,
    FSE_CNTCT.MODIFIED_BY AS FSE_CONTACT_LAST_UPDATE_BY,
    FSE_CNTCT.CREATED_BY AS FSE_CONTACT_CREATED_BY,
   COALESCE(SHIP_ADDR.ADDRESS1, EBS_SHIP.ADDRESS1) AS SHIP_ADDRESS_LINE1,
    COALESCE(SHIP_ADDR.ADDRESS2, EBS_SHIP.ADDRESS2) AS SHIP_ADDRESS_LINE2,
    COALESCE(SHIP_ADDR.ADDRESS3, EBS_SHIP.ADDRESS3) AS SHIP_ADDRESS_LINE3,
    COALESCE(SHIP_ADDR.ADDRESS4, EBS_SHIP.ADDRESS4) AS SHIP_ADDRESS_LINE4,
    COALESCE(SHIP_ADDR.POSTAL_CODE, EBS_SHIP.POSTAL_CODE) AS SHIP_ADDRESS_POSTAL_CODE,
    COALESCE(SHIP_CNTRY_MAP.COUNTRY_CD, EBS_SHIP.COUNTRY_CODE) AS SHIP_ADDRESS_COUNTRY_CODE,
    COALESCE(SHIP_ADDR.COUNTRY, EBS_SHIP.COUNTRY_NAME) AS SHIP_ADDRESS_COUNTRY_NAME,
    COALESCE(SHIP_ADDR.STATE, EBS_SHIP.STATE) AS SHIP_ADDRESS_STATE,
    COALESCE(SHIP_ADDR.CITY, EBS_SHIP.CITY) AS SHIP_ADDRESS_CITY,
    EBS_BILL.ADDRESS1 AS BILL_ADDRESS_LINE1,
    EBS_BILL.ADDRESS2 AS BILL_ADDRESS_LINE2,
    EBS_BILL.ADDRESS3 AS BILL_ADDRESS_LINE3,
    EBS_BILL.ADDRESS4 AS BILL_ADDRESS_LINE4,
    EBS_BILL.POSTAL_CODE AS BILL_ADDRESS_POSTAL_CODE,
    EBS_BILL.COUNTRY_CODE AS BILL_ADDRESS_COUNTRY_CODE,
    EBS_BILL.COUNTRY_NAME AS BILL_ADDRESS_COUNTRY_NAME,
    EBS_BILL.STATE AS BILL_ADDRESS_STATE,
    EBS_BILL.CITY AS BILL_ADDRESS_CITY,
    '{{V_START_DTTM}}'::TIMESTAMP_NTZ BIW_INS_DTTM ,
    '{{V_START_DTTM}}'::TIMESTAMP_NTZ BIW_UPD_DTTM ,
    {{V_BIW_BATCH_ID}}	 as BIW_BATCH_ID
    FROM STG_MODELN_CUSTOMER MDLN_CUST
    LEFT JOIN  STG_MODELN_CUSTOMER MDLN_CUST_PARENT
    ON MDLN_CUST.PARENT_CUSTOMER_OID = MDLN_CUST_PARENT.CRM_CUSTOMER_OID
    
    LEFT JOIN STG_MODELN_ADDRESS ADDRESS 
    ON MDLN_CUST.DEFAULT_SHIP_TO_ADDRESS_OID =ADDRESS.OID

    LEFT JOIN STG_MODELN_CNTRY_MAP MDLN_CNTRY_MAP
    ON UPPER(ADDRESS.COUNTRY) = UPPER(MDLN_CNTRY_MAP.COUNTRY)

    LEFT JOIN STG_MODELN_CURRENCY_INFO MDLN_CURRENCY_INFO
    ON MDLN_CUST.CURRENCY_INFO_OID = MDLN_CURRENCY_INFO.OID

    LEFT JOIN STG_MAINFRAME_CURRENCY MAINFRAME_CURRENCY
    ON MDLN_CURRENCY_INFO.ISO_CODE =MAINFRAME_CURRENCY.ISO_CURRENCY_CD

    LEFT JOIN STG_XXON_CORP CORP 
    ON MDLN_CUST_PARENT.ACCOUNT_NUM = CORP.CORPORATION_CODE

    LEFT JOIN STG_XXON_CORP END_CORP 
    ON MDLN_CUST.END_CORPORATION_CODE =END_CORP.CORPORATION_CODE

     -- BRIDGE BETWEEN CUSTOMER AND ORG
    LEFT JOIN STG_ORG_CUST_MAP ORG_CUST_MAP
    ON MDLN_CUST.CRM_CUSTOMER_OID = ORG_CUST_MAP.CUSTOMER_OID
    LEFT JOIN STG_ORG ORG
    ON ORG_CUST_MAP.ORG_OID = ORG.OID
    -- GET REGION CODE
    LEFT JOIN STG_MODELN_TERRITORY SALES
    ON ORG.ORG_CODE = SALES.SALES_ORGANIZATION_CODE

    -- GET UDC_GENERIC_PROG_DESC
    LEFT JOIN STG_LOC_DW_OUT LOC_DW_OUT 
    ON MDLN_CUST.ACCOUNT_NUM = LOC_DW_OUT.LOC
    -- GET MARKET SEGMENT
    LEFT JOIN STG_MODELN_SEG MDLN_SEG
    ON  MDLN_CUST.SEGMENT_OID = MDLN_SEG.OID

    -- FSE
    LEFT JOIN STG_PRO_USER  FSE_CNTCT
    ON MDLN_CUST.CUSTOM_FIELD43 = FSE_CNTCT.OID
    AND MDLN_CUST.CUSTOM_FIELD43 IS NOT NULL
    AND MDLN_CUST.CUSTOMER_LEVEL_OID=3

    LEFT JOIN STG_MODELN_ADDRESS SHIP_ADDR 
    ON MDLN_CUST.BILL_TO_ADDRESS_OID =SHIP_ADDR.OID

    LEFT JOIN STG_MODELN_CNTRY_MAP SHIP_CNTRY_MAP
    ON UPPER(SHIP_ADDR.COUNTRY) = UPPER(SHIP_CNTRY_MAP.COUNTRY)    

    LEFT JOIN XXON_OM_CUSTOMER_ADDRESS_V EBS_SHIP 
    ON MDLN_CUST.ACCOUNT_NUM = EBS_SHIP.CUSTOMER_CODE
    AND EBS_SHIP.ADDRESS_TYPE = 'SHIP'

    LEFT JOIN XXON_OM_CUSTOMER_ADDRESS_V EBS_BILL 
    ON MDLN_CUST.ACCOUNT_NUM = EBS_BILL.CUSTOMER_CODE
    AND EBS_BILL.ADDRESS_TYPE = 'BILL'

WHERE --LEVEL_OID value 3 for Customer level data ,  1 for Corp level data
MDLN_CUST.ACCOUNT_NUM NOT IN ( SELECT CUSTOMER_CODE FROM CUSTOMER_EBS)
AND MDLN_CUST.CUSTOMER_LEVEL_OID=3 
--Filter is applied at bottom instead of CTE because we may have to process Customer who is active and Corp is inactive 
AND MDLN_CUST.OBSOLETE_FLAG =0 AND MDLN_CUST.CUSTOMER_SOURCE='MN'