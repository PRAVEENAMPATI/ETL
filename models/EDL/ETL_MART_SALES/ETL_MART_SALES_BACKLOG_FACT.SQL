/*---------------------------------------------------------------------------
Command to run model:
-- dbt run --select ETL_MART_SALES_BACKLOG_FACT

Version     Date            Author              Description
-------     --------       ------------         ----------------------------------
1.0         09 DEC 2022    Kali DANDAPANI       Initial Version
2.0         09 DEC 2022    SRUTHI KASBE         Adding new columns and Rearranging the columns
3.0         02/10/2023     Vinay Subramanian    Replaced Currency_exchange logic with Mart_currency
4.0         04/19/2023     Mattuvarkulali M     Added new column ODM_END_CORP_CD
---------------------------------------------------------------------------*/

{################# EDW Job Template Variables #################}
{%-set v_pk_list = ['BACKLOG_KEY']-%}
{% if is_incremental() %}
{%-set v_house_keeping_column = ['BIW_INS_DTTM','BIW_UPD_DTTM','BIW_BATCH_ID','BIW_MD5_KEY']-%}
{%-set v_md5_column_list =  edw_get_md5_column_list( this ,v_pk_list|list+ v_house_keeping_column|list ) -%}
{%-set v_all_column_list =  edw_get_column_list( this ) -%}
--DBT Variable
--SELECT {{v_all_column_list}}
--SELECT {{v_md5_column_list}}
{% endif %}

{################# Batch control insert and update SQL #################}
{%- set v_dbt_job_name = 'DBT_ETL_MART_SALES_BACKLOG_FACT'-%}
-- Step 1 Batch process info
{%- set v_watermark = edw_batch_control(v_dbt_job_name,config.get('schema'),config.get('alias') ,config.get('tags'),config.get('materialized') ) -%}
{%- set V_LWM = v_watermark[0] -%}
{%- set V_HWM = v_watermark[1] -%}
{%- set V_START_DTTM = v_watermark[2] -%}
{%- set V_BIW_BATCH_ID = v_watermark[3] -%}
{%- set v_sql_upd_success_batch = "CALL UTILITY.EDW_BATCH_SUCCESS_PROC('"~v_dbt_job_name~"')" -%}

{################# Snowflake Object Configuration #################}
{{
    config(
         description = 'Building table BACKLOG_FACT for MART_SALES'
        ,transient=true
        ,materialized='table'
        ,schema ='ETL_MART_SALES'
        ,alias='BACKLOG_FACT'
		,unique_key= v_pk_list
        ,tags =['MART_SALES']
		,post_hook= [v_sql_upd_success_batch]	
        )
}}

WITH STG_BACKLOG AS 
(
SELECT 
    MD5(OBJECT_CONSTRUCT ('COL1',ACTIVITY::STRING
                        , 'COL2',REGION::STRING
                        , 'COL3',SALES_ORDER_NUM::STRING
                        , 'COL4',SALES_ORDER_LINE::STRING
                        , 'COL5',SALES_ORDER_LINE_LINE::STRING
                        , 'COL6',JOURNAL_DESCRIPTION::STRING
                        , 'COL7',PROCESS_DT::STRING
                        )::STRING ) AS BACKLOG_KEY,
    ACCRUAL_NET_AMOUNT_USD  AS ACCRUAL_AMOUNT_USD,
    ACCRUAL_CATEGORY  AS ACCRUAL_CATEGORY,
    ACCRUAL_COMMENTS  AS ACCRUAL_COMMENTS,
    ACCRUAL_FACTOR  AS ACCRUAL_FACTOR,
    OBR_RULEID  AS ACCRUAL_RULE_ID,
    OBR_RULESET  AS ACCRUAL_RULE_SET,
    COALESCE(CASE 
    WHEN  ACCRUAL_TRANSACTION_DATE::DATE <  '1992-01-01'::DATE
        THEN '1992-01-01'::DATE
    ELSE  ACCRUAL_TRANSACTION_DATE::DATE   
    END,'1960-01-01')::DATE   AS ACCRUAL_TRANSACTION_DATE,
    ACCRUAL_TYPE  AS ACCRUAL_TYPE,
    CASE 
    WHEN UPPER (ACTIVITY) = 'BACKLOG_ACCRUAL' 
    THEN 'Backlog Accrual' 
    WHEN dlvry_status_cd = 'RL'   AND line_line_status = 'SC' 
    THEN 'Pick Released.' 
    WHEN dlvry_status_cd = 'RL'   AND line_line_status = 'RL' 
    THEN 'Pick Released.'
    WHEN dlvry_status_cd = 'SC'   AND line_line_status = 'RL' 
    THEN 'Scheduled Backlog.' 
    ELSE ACTIVITY 
    END ACTIVITY, 
    GROSS_AMT AS BACKLOG_GROSS_USD,
    NET_AMT AS BACKLOG_NET_USD,
    LCL_GROSS_AMT AS BACKLOG_GROSS_AMOUNT_TRANSACTION_CURRENCY, ---UPDATED
    LCL_NET_AMT AS BACKLOG_NET_AMOUNT_TRANSACTION_CURRENCY, ----UPDATED
    NET_QTY  AS BACKLOG_NET_QUANTITY,
    BILL_SOURCE_CD  AS BILL_SOURCE_CODE,
    COALESCE(TRY_TO_BOOLEAN(BLANKET_ORDER_FLAG),FALSE)::BOOLEAN   AS IS_BLANKET_ORDER,
    BOOKING_AND_BILLING_CD  AS BOOKING_AND_BILLING_CODE,
    TRX_CATEGORY  AS BOOKING_CATEGORY,
    COALESCE(TRY_TO_BOOLEAN(TBSA_BOOKING_FLG),FALSE)::BOOLEAN AS IS_BOOKING,
    COI  AS CUSTOMER_OF_INTEREST,
    CONTRACT_CURRENCY  AS CONTRACT_CURRENCY,
    ACC_NET_AMT_CONTRACT_CURRENCY  AS ACCRUAL_AMOUNT_CONTRACT_CURRENCY,
    GROSS_AMT_CONTRACT_CURRENCY  AS GROSS_AMOUNT_CONTRACT_CURRENCY,
    NET_AMT_CONTRACT_CURRENCY  AS BACKLOG_NET_AMOUNT_CONTRACT_CURRENCY,
    CPN  AS CUSTOMER_PART_NUMBER,
    COALESCE(CRD_DT,'1960-01-01'::DATE) AS CUSTOMER_REQUESTED_DATE,
    CASE 
    WHEN CRD_DT::DATE <= PROCESS_DT::DATE 
    THEN 1 
    ELSE 0 
    END::BOOLEAN AS IS_CRD_DELQ,
    CREDIT_ACCOUNT  AS CREDIT_ACCOUNT,
    COALESCE(CASE 
    WHEN  CRSD_DT::DATE <  '1992-01-01'::DATE
        THEN '1992-01-01'::DATE
    ELSE  CRSD_DT::DATE   
    END ,'1960-01-01')::DATE  AS REQUESTED_SHIP_DATE,
    CASE 
    WHEN CRSD_DT::DATE <= PROCESS_DT::DATE 
    THEN 1 
    ELSE 0 
    END::BOOLEAN IS_CRSD_DELQ,
    CSR  AS CUSTOMER_SERVICE_REPRESENTATIVE,
    TRANSACTION_CURRENCY AS TRANSACTION_CURRENCY_ISO_CODE,
    CUSPA_NUMBER  AS CUSTOMER_PA_NUMBER,
    CUST_PO_NUMBER  AS CUSTOMER_PO_NUMBER,
    CUST_RECPT_BANK_CD  AS CUSTOMER_RECIEPT_BANK_CODE,
    DEBIT_ACCOUNT  AS DEBIT_ACCOUNT,
    DELIVERY_REQUEST_DATE   AS DELIVERY_REQUEST_DATE,
    DELIVERY_SOURCE_CD  AS DELIVERY_SOURCE_CD,
    DELVRY_HOLD_STATUS  AS ORDER_DELIVERY_HOLD_STATUS,
    DEMAND_BANK  AS DEMAND_BANK,
    DEMAND_CLASS  AS DEMAND_CLASS,
    DEMAND_TYPE  AS DEMAND_TYPE,
    DLVRY_STATUS_DTME  AS ORDER_DELIVERY_STATUS_DTME,
    END_CUST_CD  AS END_CUSTOMER_CODE,
    ENTRY_DT  AS ENTRY_DATE,
    COALESCE(
            CASE 
            WHEN  EPSD_DT::DATE <  '1992-01-01'::DATE
                THEN '1992-01-01'::DATE
            ELSE  EPSD_DT::DATE   
            END
            ,'1960-01-01'::DATE
            )  AS EARLIEST_POSSIBLE_SHIP_DATE,            
    FMS_SERVICE_PROGRAM  AS FMS_SERVICE_PROGRAM,
    HANDLING_CODE  AS HANDLING_CODE,
    HDR_HOLD_STATUS  AS ORDER_HDR_HOLD_STATUS,
    INVENTORY_INSURANCE_COVERAGE  AS INVENTORY_INSURANCE_COVERAGE,
    INVOICE_NUM  AS INVOICE_NUM,
    INVOICED_QUANTITY  AS INVOICED_QUANTITY,
    ITM_HOLD_STATUS  AS ORDER_ITM_HOLD_STATUS,
    JOURNAL_DESCRIPTION  AS JOURNAL_DESCRIPTION,
    CORP_CD AS DIRECT_CORPORATION_CODE, --- UPDATED
    SHIP_TO_CUST_CD AS DIRECT_CUSTOMER_CODE, --- UPDATED
    SHIP_TO_CUST_CD AS INDIRECT_CUSTOMER_CODE, --- UPDATED
    END_CORP AS END_CORPORATION_CODE, --- UPDATED
    INTERNAL_PN AS INTERNAL_PART_NUMBER, --- UPDATED
    MARKET_PN AS MARKET_PRODUCT_NUMBER, --- UPDATED
    LIABILITY_AGREEMENT  AS LIABILITY_AGREEMENT,
    LINE_STATUS  AS ORDER_LINE_STATUS,
    COALESCE(CASE 
    WHEN  COALESCE(RSD_DT, MSD_DT)::DATE <  '1992-01-01'::DATE
        THEN '1992-01-01'::DATE
    ELSE  COALESCE(RSD_DT, MSD_DT)::DATE   
    END,'1960-01-01')::DATE AS MANUFACTURER_RESCHEDULED_SHIP_DATE,
    CASE 
    WHEN COALESCE(RSD_DT, MSD_DT)::DATE <= PROCESS_DT::DATE 
        THEN 1 
    ELSE 0 
    END::BOOLEAN IS_MRSD_DELQ,
    COALESCE(CASE 
    WHEN  MSD_DT::DATE <  '1992-01-01'::DATE
        THEN '1992-01-01'::DATE
    ELSE  MSD_DT::DATE   
    END,'1960-01-01')::DATE AS  ORIGINAL_SCHEDULED_SHIP_DATE,
    CASE 
    WHEN MSD_DT::DATE <= PROCESS_DT::DATE 
        THEN 1 
    ELSE 0 
    END::BOOLEAN  AS  IS_MSD_DELQ,
    NNCO_AGREEMENT_TYPE  AS NNCO_AGREEMENT_TYPE,
    CASE 
    WHEN NNCO = 'Y' 
        THEN 1 
    ELSE 0 
    END::BOOLEAN AS IS_NNCO,
    ACCRUAL_ID  AS OBR_TRX_ID,
    OPERATING_UNIT  AS OPERATING_UNIT,
    ORA_DLVRY_STATUS_CD  AS ORA_DELIVERY_STATUS_CODE,
    DLVRY_STATUS_CD AS DELIVERY_STATUS_CODE,
    ORA_LINE_NUM  AS LINE_NUMBER,
    ORA_ORDER_DLVRY_SRC_CD  AS ORDER_DLVRY_SOURCE_CODE,
    ORA_ORDER_NUM  AS ORDER_NUMBER,
    ORDER_SOURCE_CD  AS ORDER_SOURCE_CODE,
    ORDER_STATUS  AS ORDER_STATUS,
    ORDER_TYPE_CD  AS ORDER_TYPE_CODE,
    COALESCE(CASE 
            WHEN  PDD_DT::DATE <  '1992-01-01'::DATE
                THEN '1992-01-01'::DATE
            ELSE  PDD_DT::DATE   
            END 
            ,'1960-01-01'::DATE
            ) AS  PLANNED_DELIVERY_DATE ,
    CASE 
    WHEN PDD_DT::DATE <= PROCESS_DT::DATE 
        THEN 1 
    ELSE 0 
    END::BOOLEAN  AS IS_PDD_DELQ,
    PICK_QUANTITY  AS PICK_QUANTITY,
    PRICE_SOURCE  AS PRICE_SOURCE,
    PROCESS_DT  AS PROCESS_DATE,
    COALESCE(CASE 
    WHEN  RDD_DT::DATE <  '1992-01-01'::DATE
        THEN '1992-01-01'::DATE
    ELSE  RDD_DT::DATE   
    END ,'1960-01-01')::DATE  AS RESCHEDULED_DELIVERY_DATE,
    CASE 
    WHEN RDD_DT::DATE <= PROCESS_DT::DATE 
        THEN 1 
    ELSE 0 
    END::BOOLEAN  AS IS_RDD_DELQ,
    COALESCE(CASE 
    WHEN  RSD_DT::DATE <  '1992-01-01'::DATE
        THEN '1992-01-01'::DATE
    ELSE  RSD_DT::DATE   
    END ,'1960-01-01')::DATE   AS SCHEDULED_SHIPPED_DATE,
    SALES_ORDER_LINE_LINE  AS LEGACY_SALES_DELIVERY_NUMBER,
    SALES_ORDER_LINE  AS LEGACY_SALES_ITEM_NUMBER,
    SALES_ORDER_LI_DL  AS SALES_ORDER_LINE_ITEM_DELIVERY,
    SALES_ORDER_NUM  AS LEGACY_SALES_ORDER_NUMBER,
    SALES_QUOTE_NUM  AS SALES_QUOTE_NUM,
    COALESCE(TRY_TO_BOOLEAN(TBSA_SAMPLES_FLG),FALSE)::BOOLEAN   AS IS_SAMPLES,
    SHIP_CONFIRMED_QTY  AS SHIP_CONFIRMED_QTY,
    SOLD_TO_CUST_CD  AS SOLD_TO_CUST_CODE,
    SOURCE_DEMAND_BANK  AS SOURCE_DEMAND_BANK,
    'ON' AS SOURCE_OF_SALE,
    SPA_CODE  AS SERVICE_PROGRAM_CODE,
    SPA_NAME  AS SERVICE_PROGRAM_CUSTOMER,
    TRANSACTION_DATE  AS TRANSACTION_DATE,
    TRANSIT_DAYS  AS TRANSIT_DAYS,
    COALESCE(TRY_TO_BOOLEAN(TRUE_BACKLOG_FLAG),FALSE)::BOOLEAN  AS IS_TRUE_BACKLOG,
    CASE 
    WHEN SHIP_TO_CUST_CD IN ('HUAPW','HUAIW','HUAQW','HUAJW','HUASW','HUARW','HUAKW','HUALW','HUAUW'
                            ,'HUAXW','HUAMW','HUANW','HUAOW','HUABW','HUACW','HUADW','HUAEW','HUAFW'
                            ,'HUAGW','HUAHW','HUBAW','HUCAW','HUEAW','HUFAW','HUGAW','HUAAW') 
    THEN 'Y' 
    WHEN CORP_CD='HUAW' OR END_CORP = 'HUAW' 
    THEN 'N' 
    ELSE IS_TRUE_BACKLOG
    END::BOOLEAN   AS IS_SALES_TRUE_BACKLOG,
    ACCRUAL_NET_AMOUNT  AS ACCRUAL_AMOUNT_TRANSACTION_CURRENCY,
    TRX_UNIT_PRICE  AS UNIT_PRICE_TRANSACTION_CURRENCY,
    U_PRICE_CRRT_AMT  AS UNIT_PRICE_CRRT_AMT,
    U_PRICE_SOURCE_CD  AS UNIT_PRICE_SOURCE_CD,
    TRX_UNIT_PRICE_USD  AS UNIT_PRICE_USD,
    COALESCE(TRY_TO_BOOLEAN(TBSA_WILL_SCHD_FLG),FALSE)::BOOLEAN  AS IS_WS_FLAG,
    REGION  AS REGION,
    BUSINESS_CLASS_CD  AS BUSINESS_CLASS_CODE,
    ACCRUAL_STATUS,
    CPN_REVISION_CD AS CPN_REVISION_CODE,
    FILE_NAME,
    ODM_END_CORP_CD,
    '{{V_START_DTTM}}'::TIMESTAMP_NTZ BIW_INS_DTTM ,
    '{{V_START_DTTM}}'::TIMESTAMP_NTZ BIW_UPD_DTTM ,
    {{V_BIW_BATCH_ID}} as BIW_BATCH_ID
FROM {{source('STG_ONE','FINANCIAL_BACKLOG_CURR_BASE')}} STG
-- Need to revisit for Source to Snowflake WHERE  BIW_UPD_DTTM >= '{{V_LWM}}'    AND BIW_UPD_DTTM < '{{V_HWM}}'
QUALIFY( ROW_NUMBER() OVER (PARTITION BY BACKLOG_KEY ORDER BY STG.BIW_UPD_DTTM DESC)=1)
),

FISCAL_MONTH AS(
    SELECT 
        CALENDAR_DATE,
        FISCAL_MONTH_KEY
    FROM 
        {{ ref('MART_DATE') }}
),

CURRENCY AS
(
SELECT
    CURRENCY_KEY,
    FISCAL_MTH_NUM,
    FROM_CURRENCY_CODE,
    TO_CURRENCY_CODE,
    EXCHANGE_RATE
FROM
   {{ref('MART_CURRENCY_EXCHANGE')}}
)

SELECT 
    BKLG.BACKLOG_KEY,
    ----------------------FK KEY------------------------------
    MD5(COALESCE(BKLG.DIRECT_CUSTOMER_CODE::STRING,'-1')) AS DIRECT_CUSTOMER_KEY,
    MD5(COALESCE(BKLG.INDIRECT_CUSTOMER_CODE::STRING,'-1')) AS INDIRECT_CUSTOMER_KEY,       
    MD5(COALESCE(BKLG.END_CUSTOMER_CODE::STRING,'-1')) AS END_CUSTOMER_KEY,      
    MD5(COALESCE(BKLG.DIRECT_CORPORATION_CODE::STRING,'-1')) AS DIRECT_CORPORATION_KEY,
    MD5(COALESCE(BKLG.END_CORPORATION_CODE::STRING,'-1')) AS END_CORPORATION_KEY,        
    MD5(COALESCE(BKLG.MARKET_PRODUCT_NUMBER::STRING,'-1')) AS MARKET_PRODUCT_NUMBER_KEY, 
    MD5(COALESCE(BKLG.INTERNAL_PART_NUMBER::STRING,'-1')) AS INTERNAL_PART_NUMBER_KEY,   
    ----------------------FK CODE------------------------------
	BKLG.PROCESS_DATE,
    BKLG.DIRECT_CUSTOMER_CODE,
    BKLG.INDIRECT_CUSTOMER_CODE,                                  
    BKLG.END_CUSTOMER_CODE,                                  
    BKLG.DIRECT_CORPORATION_CODE,
    BKLG.END_CORPORATION_CODE,
    BKLG.MARKET_PRODUCT_NUMBER,
    BKLG.INTERNAL_PART_NUMBER,
    --------------------- OTHER ATTRIBUTES--------------------
    BKLG.CUSTOMER_PART_NUMBER,
    BKLG.SOURCE_OF_SALE,
    BKLG.SALES_ORDER_LINE_ITEM_DELIVERY,
    BKLG.REGION,
    BKLG.LEGACY_SALES_ORDER_NUMBER,
    BKLG.LEGACY_SALES_ITEM_NUMBER,
    BKLG.LEGACY_SALES_DELIVERY_NUMBER,
    BKLG.SALES_QUOTE_NUM,
    BKLG.ORDER_TYPE_CODE,
    BKLG.ACCRUAL_AMOUNT_USD,
    BKLG.ACCRUAL_CATEGORY,
    BKLG.ACCRUAL_COMMENTS,
    BKLG.ACCRUAL_FACTOR,
    BKLG.ACCRUAL_RULE_ID,
    BKLG.ACCRUAL_RULE_SET,
    BKLG.ACCRUAL_TRANSACTION_DATE,
    BKLG.ACCRUAL_TYPE,
    BKLG.ACTIVITY,
    BKLG.BACKLOG_GROSS_USD, 
    TRUNCATE(BKLG.BACKLOG_GROSS_AMOUNT_TRANSACTION_CURRENCY / EUR.EXCHANGE_RATE,4) AS BACKLOG_GROSS_EUR,
    TRUNCATE(BKLG.BACKLOG_GROSS_AMOUNT_TRANSACTION_CURRENCY / JPY.EXCHANGE_RATE,4) AS BACKLOG_GROSS_JPY,
    BKLG.BACKLOG_NET_USD, 
    TRUNCATE(BKLG.BACKLOG_NET_AMOUNT_TRANSACTION_CURRENCY / EUR.EXCHANGE_RATE,4) AS BACKLOG_NET_EUR,
    TRUNCATE(BKLG.BACKLOG_NET_AMOUNT_TRANSACTION_CURRENCY / JPY.EXCHANGE_RATE,4) AS BACKLOG_NET_JPY,
    BKLG.BACKLOG_NET_QUANTITY,
    BKLG.BACKLOG_GROSS_AMOUNT_TRANSACTION_CURRENCY,
    BKLG.BACKLOG_NET_AMOUNT_TRANSACTION_CURRENCY,
    BKLG.BILL_SOURCE_CODE,
    BKLG.IS_BLANKET_ORDER,
    BKLG.BOOKING_AND_BILLING_CODE,
    BKLG.BOOKING_CATEGORY,
    BKLG.IS_BOOKING,
    BKLG.CUSTOMER_OF_INTEREST,
    BKLG.CONTRACT_CURRENCY,
    BKLG.ACCRUAL_AMOUNT_CONTRACT_CURRENCY,
    BKLG.GROSS_AMOUNT_CONTRACT_CURRENCY,
    BKLG.BACKLOG_NET_AMOUNT_CONTRACT_CURRENCY,
    BKLG.CUSTOMER_REQUESTED_DATE,
    BKLG.IS_CRD_DELQ,
    BKLG.CREDIT_ACCOUNT,
    BKLG.REQUESTED_SHIP_DATE,
    BKLG.IS_CRSD_DELQ,
    BKLG.CUSTOMER_SERVICE_REPRESENTATIVE,
    BKLG.TRANSACTION_CURRENCY_ISO_CODE,
    BKLG.CUSTOMER_PA_NUMBER,
    BKLG.CUSTOMER_PO_NUMBER,
    BKLG.CUSTOMER_RECIEPT_BANK_CODE,
    BKLG.DEBIT_ACCOUNT,
    BKLG.DELIVERY_REQUEST_DATE,
    BKLG.DELIVERY_SOURCE_CD,
    BKLG.ORDER_DELIVERY_HOLD_STATUS,
    BKLG.DEMAND_BANK,
    BKLG.DEMAND_CLASS,
    BKLG.DEMAND_TYPE,
    BKLG.ORDER_DELIVERY_STATUS_DTME,
    BKLG.ENTRY_DATE,
    BKLG.EARLIEST_POSSIBLE_SHIP_DATE,
    BKLG.FMS_SERVICE_PROGRAM,
    BKLG.HANDLING_CODE,
    BKLG.ORDER_HDR_HOLD_STATUS,
    BKLG.INVENTORY_INSURANCE_COVERAGE,
    BKLG.INVOICE_NUM,
    BKLG.INVOICED_QUANTITY,
    BKLG.ORDER_ITM_HOLD_STATUS,
    BKLG.JOURNAL_DESCRIPTION,
    BKLG.LIABILITY_AGREEMENT,
    BKLG.ORDER_LINE_STATUS,
    BKLG.MANUFACTURER_RESCHEDULED_SHIP_DATE,
    BKLG.IS_MRSD_DELQ,
    BKLG.ORIGINAL_SCHEDULED_SHIP_DATE,
    BKLG.IS_MSD_DELQ,
    BKLG.NNCO_AGREEMENT_TYPE,
    BKLG.IS_NNCO,
    BKLG.OBR_TRX_ID,
    BKLG.OPERATING_UNIT,
    BKLG.ORA_DELIVERY_STATUS_CODE,
    BKLG.DELIVERY_STATUS_CODE,
    BKLG.LINE_NUMBER,
    BKLG.ORDER_DLVRY_SOURCE_CODE,
    BKLG.ORDER_NUMBER,
    BKLG.ORDER_SOURCE_CODE,
    BKLG.ORDER_STATUS,
    BKLG.PLANNED_DELIVERY_DATE,
    BKLG.IS_PDD_DELQ,
    BKLG.PICK_QUANTITY,
    BKLG.PRICE_SOURCE,
    BKLG.RESCHEDULED_DELIVERY_DATE,
    BKLG.IS_RDD_DELQ,
    BKLG.SCHEDULED_SHIPPED_DATE,
    BKLG.IS_SAMPLES,
    BKLG.SHIP_CONFIRMED_QTY,
    BKLG.SOLD_TO_CUST_CODE,
    BKLG.SOURCE_DEMAND_BANK,
    BKLG.SERVICE_PROGRAM_CODE,
    BKLG.SERVICE_PROGRAM_CUSTOMER,
    BKLG.TRANSACTION_DATE,
    BKLG.TRANSIT_DAYS,
    BKLG.IS_TRUE_BACKLOG,
    BKLG.IS_SALES_TRUE_BACKLOG,
    BKLG.ACCRUAL_AMOUNT_TRANSACTION_CURRENCY,
    BKLG.UNIT_PRICE_TRANSACTION_CURRENCY,
    BKLG.UNIT_PRICE_CRRT_AMT,
    BKLG.UNIT_PRICE_SOURCE_CD,
    BKLG.UNIT_PRICE_USD,
    TRUNCATE(BKLG.UNIT_PRICE_USD / UNIT_EUR.EXCHANGE_RATE,4) AS UNIT_PRICE_EUR,
    TRUNCATE(BKLG.UNIT_PRICE_USD / UNIT_JPY.EXCHANGE_RATE,4) AS UNIT_PRICE_JPY,
    BKLG.IS_WS_FLAG,
    BKLG.BUSINESS_CLASS_CODE,
    BKLG.ACCRUAL_STATUS,
    BKLG.CPN_REVISION_CODE,
    BKLG.FILE_NAME,
    BKLG.ODM_END_CORP_CD,
    BKLG.BIW_INS_DTTM, 
    BKLG.BIW_UPD_DTTM, 
    BKLG.BIW_BATCH_ID,
    md5(object_construct ('col1',DIRECT_CUSTOMER_KEY::string, 'col2',INDIRECT_CUSTOMER_KEY::string,
                        'col3',END_CUSTOMER_KEY::string, 'col4',DIRECT_CORPORATION_KEY::string, 'col5',END_CORPORATION_KEY::string,
                        'col6',MARKET_PRODUCT_NUMBER_KEY::string, 'col7',INTERNAL_PART_NUMBER_KEY::string, 'col8',PROCESS_DATE::string,
                        'col9',DIRECT_CUSTOMER_CODE::string, 'col10',INDIRECT_CUSTOMER_CODE::string, 'col11',END_CUSTOMER_CODE::string,
                        'col12',DIRECT_CORPORATION_CODE::string, 'col13',END_CORPORATION_CODE::string, 'col14',MARKET_PRODUCT_NUMBER::string,
                        'col15',INTERNAL_PART_NUMBER::string, 'col16',CUSTOMER_PART_NUMBER::string, 'col17',SOURCE_OF_SALE::string,
                        'col18',SALES_ORDER_LINE_ITEM_DELIVERY::string, 'col19',REGION::string, 'col20',LEGACY_SALES_ORDER_NUMBER::string,
                        'col21',LEGACY_SALES_ITEM_NUMBER::string, 'col22',LEGACY_SALES_DELIVERY_NUMBER::string, 'col23',SALES_QUOTE_NUM::string,
                        'col24',ORDER_TYPE_CODE::string, 'col25',ACCRUAL_AMOUNT_USD::string, 'col26',ACCRUAL_CATEGORY::string,
                        'col27',ACCRUAL_COMMENTS::string, 'col28',ACCRUAL_FACTOR::string, 'col29',ACCRUAL_RULE_ID::string, 'col30',ACCRUAL_RULE_SET::string,
                        'col31',ACCRUAL_TRANSACTION_DATE::string, 'col32',ACCRUAL_TYPE::string, 'col33',ACTIVITY::string, 'col34',BACKLOG_GROSS_USD::string,
                        'col35',BACKLOG_GROSS_EUR::string, 'col36',BACKLOG_GROSS_JPY::string, 'col37',BACKLOG_NET_USD::string,
                        'col38',BACKLOG_NET_EUR::string, 'col39',BACKLOG_NET_JPY::string, 'col40',BACKLOG_NET_QUANTITY::string,
                        'col41',BACKLOG_GROSS_AMOUNT_TRANSACTION_CURRENCY::string, 'col42',BACKLOG_NET_AMOUNT_TRANSACTION_CURRENCY::string, 'col43',BILL_SOURCE_CODE::string,
                        'col44',IS_BLANKET_ORDER::string, 'col45',BOOKING_AND_BILLING_CODE::string, 'col46',BOOKING_CATEGORY::string,
                        'col47',IS_BOOKING::string, 'col48',CUSTOMER_OF_INTEREST::string, 'col49',CONTRACT_CURRENCY::string,
                        'col50',ACCRUAL_AMOUNT_CONTRACT_CURRENCY::string, 'col51',GROSS_AMOUNT_CONTRACT_CURRENCY::string,
                        'col52',BACKLOG_NET_AMOUNT_CONTRACT_CURRENCY::string, 'col53',CUSTOMER_REQUESTED_DATE::string, 'col54',IS_CRD_DELQ::string,
                        'col55',CREDIT_ACCOUNT::string, 'col56',REQUESTED_SHIP_DATE::string, 'col57',IS_CRSD_DELQ::string,
                        'col58',CUSTOMER_SERVICE_REPRESENTATIVE::string, 'col59',TRANSACTION_CURRENCY_ISO_CODE::string, 'col60',CUSTOMER_PA_NUMBER::string,
                        'col61',CUSTOMER_PO_NUMBER::string, 'col62',CUSTOMER_RECIEPT_BANK_CODE::string, 'col63',DEBIT_ACCOUNT::string,
                        'col64',DELIVERY_REQUEST_DATE::string, 'col65',DELIVERY_SOURCE_CD::string, 'col66',ORDER_DELIVERY_HOLD_STATUS::string,
                        'col67',DEMAND_BANK::string, 'col68',DEMAND_CLASS::string, 'col69',DEMAND_TYPE::string,
                        'col70',ORDER_DELIVERY_STATUS_DTME::string, 'col71',ENTRY_DATE::string, 'col72',EARLIEST_POSSIBLE_SHIP_DATE::string,
                        'col73',FMS_SERVICE_PROGRAM::string, 'col74',HANDLING_CODE::string, 'col75',ORDER_HDR_HOLD_STATUS::string,
                        'col76',INVENTORY_INSURANCE_COVERAGE::string, 'col77',INVOICE_NUM::string, 'col78',INVOICED_QUANTITY::string,
                        'col79',ORDER_ITM_HOLD_STATUS::string, 'col80',JOURNAL_DESCRIPTION::string, 'col81',LIABILITY_AGREEMENT::string,
                        'col82',ORDER_LINE_STATUS::string, 'col83',MANUFACTURER_RESCHEDULED_SHIP_DATE::string, 'col84',IS_MRSD_DELQ::string,
                        'col85',ORIGINAL_SCHEDULED_SHIP_DATE::string, 'col86',IS_MSD_DELQ::string, 'col87',NNCO_AGREEMENT_TYPE::string, 'col88',IS_NNCO::string,
                        'col89',OBR_TRX_ID::string, 'col90',OPERATING_UNIT::string, 'col91',ORA_DELIVERY_STATUS_CODE::string,
                        'col92',DELIVERY_STATUS_CODE::string, 'col93',LINE_NUMBER::string, 'col94',ORDER_DLVRY_SOURCE_CODE::string,
                        'col95',ORDER_NUMBER::string, 'col96',ORDER_SOURCE_CODE::string, 'col97',ORDER_STATUS::string,
                        'col98',PLANNED_DELIVERY_DATE::string, 'col99',IS_PDD_DELQ::string, 'col100',PICK_QUANTITY::string, 'col101',PRICE_SOURCE::string,
                        'col102',RESCHEDULED_DELIVERY_DATE::string, 'col103',IS_RDD_DELQ::string, 'col104',SCHEDULED_SHIPPED_DATE::string,
                        'col105',IS_SAMPLES::string, 'col106',SHIP_CONFIRMED_QTY::string, 'col107',SOLD_TO_CUST_CODE::string,
                        'col108',SOURCE_DEMAND_BANK::string, 'col109',SERVICE_PROGRAM_CODE::string, 'col110',SERVICE_PROGRAM_CUSTOMER::string,
                        'col111',TRANSACTION_DATE::string, 'col112',TRANSIT_DAYS::string, 'col113',IS_TRUE_BACKLOG::string,
                        'col114',IS_SALES_TRUE_BACKLOG::string, 'col115',ACCRUAL_AMOUNT_TRANSACTION_CURRENCY::string,
                        'col116',UNIT_PRICE_TRANSACTION_CURRENCY::string, 'col117',UNIT_PRICE_CRRT_AMT::string, 'col118',UNIT_PRICE_SOURCE_CD::string,
                        'col119',UNIT_PRICE_USD::string, 'col120',UNIT_PRICE_EUR::string, 'col121',UNIT_PRICE_JPY::string, 'col122',IS_WS_FLAG::string,
                        'col123',BUSINESS_CLASS_CODE::string, 'col124',ACCRUAL_STATUS::string, 'col125',CPN_REVISION_CODE::string, 'col126',
                        FILE_NAME::string, 'col127',ODM_END_CORP_CD::string)::string )::BINARY as BIW_MD5_KEY

FROM STG_BACKLOG BKLG

LEFT JOIN FISCAL_MONTH FM
    ON BKLG.PROCESS_DATE = FM.CALENDAR_DATE

LEFT JOIN CURRENCY EUR
    ON EUR.FISCAL_MTH_NUM = FM.FISCAL_MONTH_KEY
    AND EUR.FROM_CURRENCY_CODE = BKLG.TRANSACTION_CURRENCY_ISO_CODE  
    AND EUR.TO_CURRENCY_CODE  = 'EUR'

LEFT JOIN CURRENCY JPY
    ON JPY.FISCAL_MTH_NUM = FM.FISCAL_MONTH_KEY
    AND JPY.FROM_CURRENCY_CODE = BKLG.TRANSACTION_CURRENCY_ISO_CODE
    AND JPY.TO_CURRENCY_CODE  = 'JPY'

LEFT JOIN CURRENCY UNIT_EUR
    ON UNIT_EUR.FISCAL_MTH_NUM = FM.FISCAL_MONTH_KEY
    AND UNIT_EUR.TO_CURRENCY_CODE  = 'EUR'
    AND UNIT_EUR.FROM_CURRENCY_CODE = 'USD'

LEFT JOIN CURRENCY UNIT_JPY
    ON UNIT_JPY.FISCAL_MTH_NUM = FM.FISCAL_MONTH_KEY
    AND UNIT_JPY.TO_CURRENCY_CODE  = 'JPY'
    AND UNIT_JPY.FROM_CURRENCY_CODE = 'USD'
