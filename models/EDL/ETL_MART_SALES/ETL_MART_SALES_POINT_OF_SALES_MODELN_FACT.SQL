/*---------------------------------------------------------------------------
Command to run model:
--dbt run --select ETL_MART_SALES_POINT_OF_SALES_MODELN_FACT
--dbt run --select ETL_MART_SALES_POINT_OF_SALES_MODELN_FACT --vars 'is_backfill: True'

Version     Date            Author             Description
-------     --------        -----------        ----------------------------------
1.0         10/18/2022      Sruthi Kasbe       Updated customer columns and its order
2.0         12/16/2022      Vinay Subramanian  Corrected Currency_exchange logic
3.0         12/21/2022      Vinay Subramanian  Corrected logic for End_corporation
4.0         04/17/2023      Rishi Kumar Ola    Updated logic to fetch from MArt Customer instead fo ModelN
5.0         Apr-20-2023     Kali D             Added look back of '3 day'.DWH is doing 2 days look back since Modeln is processing fact first and then other attributes.
---------------------------------------------------------------------------*/
{################# EDW Job Template Variables #################}
{%-set v_pk_list = ['TRANSACTION_ID']-%}
{%-set v_house_keeping_column = ['BIW_INS_DTTM','BIW_UPD_DTTM','BIW_BATCH_ID','BIW_MD5_KEY']-%}
/*--DBT Variable used during development*/
{% if is_incremental() %}
{%-set v_all_column_list =  edw_get_column_list( this ) -%}
{%-set v_update_column_list = edw_get_quoted_column_list( this ,v_pk_list|list + ['BIW_INS_DTTM']|list) -%}
{%-set v_md5_column_list =  edw_get_md5_column_list( this ,v_pk_list|list+ v_house_keeping_column|list ) -%}
/*--DBT Variable*/
/*--SELECT {{v_all_column_list}}*/
/*--SELECT {{v_update_column_list}}*/
/*--SELECT {{v_md5_column_list}}*/
{% endif %}

{################# Batch control insert and update SQL #################}
{%- set v_dbt_job_name = 'DBT_ETL_MART_SALES_POINT_OF_SALES_MODELN_FACT'-%}
-- Step 1 Batch process info
{%- set v_watermark = edw_batch_control(v_dbt_job_name,config.get('schema'),config.get('alias') ,config.get('tags'),config.get('materialized') ) -%}
{%- set V_LWM = v_watermark[0] -%}
{%- set V_HWM = v_watermark[1] -%}
{%- set V_START_DTTM = v_watermark[2] -%}
{%- set V_BIW_BATCH_ID = v_watermark[3] -%}
{%- set v_sql_upd_success_batch = "CALL UTILITY.EDW_BATCH_SUCCESS_PROC('"~v_dbt_job_name~"')" -%}


{################# Snowflake Object Configuration #################}
{{
    config(
         description = 'Building ETL table POS_FACT for Sales Mart '
        ,transient=true
        ,materialized='table'
        ,schema ='ETL_MART_SALES'
        ,alias='POINT_OF_SALES_MODELN_FACT'
        ,tags =['MART_SALES']
        ,post_hook= [v_sql_upd_success_batch]	
        )
}}

WITH POS_DATA AS 
(
    SELECT 
        OID,
        DISTRIBUTOR_OID,
        CUSTOMER_OID,
        PART_OID,
        DEBIT_NUM,
        INVOICE_LINE_NUM,
        INVOICE_NUM,
        SHIP_DATE,
        SHIP_QTY,
        CUSTOM_FIELD3,
        CUSTOM_FIELD5,
        CUSTOM_FIELD6,
        CUSTOM_FIELD7,
        CUSTOM_FIELD8,
        CUSTOM_FIELD9,
        CUSTOM_FIELD10,
        CUSTOM_FIELD14,
        CUSTOM_FIELD15,
        CUSTOM_FIELD16,
        CUSTOM_FIELD17,
        CUSTOM_FIELD19,
        REVERSAL_STATUS,
        CREATED_DATE,
        MODIFIED_DATE,
        CR_FLAG,
        STATUS
    FROM {{source('STG_MODELN_PRICING_OWNER','POS_DATA')}}
	WHERE 
    {% if var('is_backfill') %}
        BIW_UPD_DTTM >= '{{var('refresh_start_ts')}}'
		AND BIW_UPD_DTTM < '{{V_START_DTTM}}'
    {% else %}
        BIW_UPD_DTTM >= '{{V_LWM}}' :: TIMESTAMP  - Interval '3 day' -- DWH is doing two day look back as Modeln is processing fact first and then other attributes.
		AND BIW_UPD_DTTM < '{{V_HWM}}'
    {% endif %}
    AND CUSTOM_FIELD3 IS NOT NULL
    QUALIFY(ROW_NUMBER() OVER (PARTITION BY CUSTOM_FIELD3 ORDER BY OID DESC, BIW_UPD_DTTM DESC)=1)
),
POS_FISCAL_DATE_OVERRIDE AS
(
    SELECT 
        TYPE,
        REPORTED_DATE,
        FISCAL_DATE
    FROM {{source ('STG_MODELN_PRICING_ADMIN','POS_FISCAL_DATE_OVERRIDE')}}
    WHERE TYPE='POS'
    QUALIFY( row_number() OVER (PARTITION BY TYPE,REPORTED_DATE ORDER BY BIW_UPD_DTTM DESC)=1) 
),
MODELN_PART AS
(
    SELECT 
        OID,
        MPN,
        PRODUCT_DIVISION
    FROM {{source ('STG_MODELN_PRICING_OWNER','PART')}}
    QUALIFY( row_number() OVER (PARTITION BY MPN ORDER BY OID DESC, BIW_UPD_DTTM DESC)=1) 
),
ADDRESS AS 
(
    SELECT 
        CODE,
        TYPE,
        ADDRESS5
    FROM {{source('STG_MODELN_PRICING_OWNER','ADDRESS')}}
    WHERE ADDRESS5 IS NOT NULL 
    AND TYPE = 5
    QUALIFY( ROW_NUMBER() OVER (PARTITION BY ADDRESS5 ORDER BY OID DESC, BIW_UPD_DTTM DESC )=1)
),
DEBIT_SCHEDULE AS 
(
    SELECT 
        OID,
        POS_DATA_OID,
        ADR_CURRENCY_INFO_OID,
        ADR_DENOM,
        ADC_DENOM,
        ACCEPTED_DISTI_COST,
        ACCEPTED_DISTI_RESALE
    FROM {{source('STG_MODELN_PRICING_OWNER','DEBIT_SCHEDULE')}}
    QUALIFY( ROW_NUMBER() OVER (PARTITION BY OID ORDER BY BIW_UPD_DTTM DESC )=1)
),
---------------------------- MODELN CUSTOMER ----------------
/* Modeln is not handling inactive customer data properly as per reporting need
MODELN_CUSTOMER AS (
    SELECT
    OID AS CRM_CUSTOMER_OID,
    ACCOUNT_NUM AS CUSTOMER_CODE,
    CUSTOM_FIELD36 AS BUSINESS_CLASS_CODE,
    CUSTOM_FIELD3 as END_CORPORATION_CODE,
    PARENT_CUSTOMER_OID,
    UPPER(coalesce(LEGAL_NAME,DISPLAY_NAME)) as CUSTOMER_NAME 
    FROM 
    {{ source('STG_MODELN_PRICING_OWNER', 'CUSTOMER') }}
    QUALIFY( ROW_NUMBER() OVER (PARTITION BY ACCOUNT_NUM ORDER BY OID DESC, MODIFIED_DATE DESC )=1)
)
,MODELN_CUST_CORP AS 
(
    SELECT 
        CUST.CRM_CUSTOMER_OID,
        CUST.CUSTOMER_CODE,
        CUST.BUSINESS_CLASS_CODE,
        CUST.END_CORPORATION_CODE,
        CUST.CUSTOMER_NAME,
        CORP.CUSTOMER_CODE AS CORPORATION_CODE
    FROM  MODELN_CUSTOMER AS CUST
    LEFT JOIN MODELN_CUSTOMER AS CORP 
    ON CUST.PARENT_CUSTOMER_OID = CORP.CRM_CUSTOMER_OID
),*/
MODELN_CUST_CORP AS (
    SELECT CUST.CRM_CUSTOMER_OID,
            CUST.CUSTOMER_CODE,
            CUST.BUSINESS_CLASS_CODE,
            CUST.END_CORPORATION_CODE,
            CUST.CUSTOMER_NAME,
            CUST.CORPORATION_CODE  
    FROM {{ref('MART_SALES_CUSTOMER')}}		CUST 
   ),
-------------------------------- PRODUCT REFERENCE  -------------------------------------

MPN_IPN_XREF AS
(
	SELECT 
		MPN,
        IPN,
        CUST5_CODE,
        END_CORP_CODE,
        CORP_NAME,
        START_DATE,
        END_DATE,
		CURRENT_DEFAULT_IPN,
        BIW_UPD_DTTM
	    FROM 
        (SELECT 		
            MPN,
            IPN,
            CUST5_CODE,
            END_CORP_CODE,
            CORP_NAME,
            START_DATE,
            END_DATE,
            CURRENT_DEFAULT_IPN,
            BIW_UPD_DTTM 
        FROM {{source('STG_PCN_PUBLIC','TRANSPARENT_FLOW_XREF')}}
        QUALIFY( ROW_NUMBER() OVER (PARTITION BY ID ORDER BY BIW_UPD_DTTM DESC)=1)
        ) ACTIVE_REC
	QUALIFY( ROW_NUMBER() OVER (PARTITION BY MPN,CUST5_CODE,END_CORP_CODE,CORP_NAME,START_DATE ORDER BY BIW_UPD_DTTM DESC)=1)
),
-------------------------------- Currency Conversion -------------------------------------
CURRENCY_INFO AS 
(
    SELECT 
        OID,
        CODE
    FROM {{source('STG_MODELN_PRICING_OWNER','CURRENCY_INFO')}}
    QUALIFY( ROW_NUMBER() OVER (PARTITION BY OID ORDER BY  BIW_UPD_DTTM DESC )=1)
),

CURRENCY AS
(
    SELECT
    CURRENCY_KEY,
    FISCAL_MTH_NUM,
    FROM_CURRENCY_CODE,
    TO_CURRENCY_CODE,
    EXCHANGE_RATE
FROM
   {{ref('MART_CURRENCY_EXCHANGE')}}
),

DATE AS
(
SELECT
    CALENDAR_DATE,
    FISCAL_MONTH_KEY
FROM
    {{ref('MART_DATE')}}
),
-------------------------------- Currency Conversion END -------------------------------------

-------------------------------- SHAREPOINT_CIPO -------------------------------------
CIPO_POS_REPORTING_MATRIX AS
(
SELECT 
    DIRECT_CORPORATION_CODE,
    COALESCE(TRY_TO_BOOLEAN(POS),'FALSE')::BOOLEAN AS IS_POS_FLAG,
    COALESCE(TRY_TO_BOOLEAN(BILL),'FALSE')::BOOLEAN AS IS_BILL_FLAG,
    FROM_DATE,
    TO_DATE
 FROM {{source('STG_SHAREPOINT_MDL','CIPO_POS_REPORTING_MATRIX')}} --- need to find pk
QUALIFY(ROW_NUMBER() OVER (PARTITION BY DIRECT_CORPORATION_CODE,FROM_DATE ORDER BY BIW_UPD_DTTM DESC) =1)
),

FINAL_SQL AS 
(SELECT 
    POS.CUSTOM_FIELD3::NUMBER AS TRANSACTION_ID,
    MD5(COALESCE(POS.CUSTOM_FIELD3,'-1')::STRING) AS TRANSACTION_KEY,

    POS.CUSTOM_FIELD16 AS DIRECT_CUSTOMER_CODE,
    MD5(COALESCE(POS.CUSTOM_FIELD16,'-1')::STRING) AS DIRECT_CUSTOMER_KEY,

    PART.MPN AS PRODUCT_ID,
    MD5(COALESCE(PART.MPN,'-1')::STRING) AS PRODUCT_KEY,
   
    COALESCE(IPN_REF_DIR_CUST.IPN,IPN_REF_END_CORP.IPN, IPN_REF_DIR_MPN.IPN,PART.MPN) AS INTERNAL_PART_NUMBER,  
    MD5(COALESCE(INTERNAL_PART_NUMBER,'-1')::STRING) AS INTERNAL_PART_NUMBER_KEY,

    COALESCE(POS_OVERRIDE.FISCAL_DATE, POS.SHIP_DATE) FISCAL_SHIP_DATE,
    REPLACE(SUBSTRING( COALESCE(POS_OVERRIDE.FISCAL_DATE, POS.SHIP_DATE),1,10),'-')::number  AS FISCAL_SHIP_DATE_KEY,

    SHIP_ADDRESS.CODE AS INDIRECT_CUSTOMER_CODE,
    MD5(COALESCE(SHIP_ADDRESS.CODE,'-1')::STRING) AS INDIRECT_CUSTOMER_KEY,

    END_CUST.CUSTOMER_CODE AS END_CUSTOMER_CODE,
    MD5(COALESCE(END_CUST.CUSTOMER_CODE,'-1')::STRING)AS END_CUSTOMER_KEY,  

    DIRECT_CUST.CORPORATION_CODE AS DIRECT_CORPORATION_CODE,
    MD5(COALESCE(DIRECT_CUST.CORPORATION_CODE,'-1')::STRING) AS DIRECT_CORPORATION_KEY,
    CASE 
    WHEN POS.CUSTOM_FIELD8 = POS.CUSTOM_FIELD10
    THEN COALESCE(  SHIP_CUST.END_CORPORATION_CODE
                    ,SHIP_CUST.CORPORATION_CODE
                    ,DIRECT_CUST.CORPORATION_CODE )  
    ELSE COALESCE(  END_CUST.CORPORATION_CODE
                    ,SHIP_CUST.END_CORPORATION_CODE
                    ,SHIP_CUST.CORPORATION_CODE
                    ,DIRECT_CUST.CORPORATION_CODE ) 
    END AS DER_END_CORPORATION_CODE, 
    MD5(COALESCE(DER_END_CORPORATION_CODE,'-1')::STRING) AS END_CORPORATION_KEY,

    SHIP_CUST.CORPORATION_CODE AS INDIRECT_CORPORATION_CODE,
    MD5(COALESCE(SHIP_CUST.CORPORATION_CODE,'-1')::STRING) AS INDIRECT_CORPORATION_KEY,

    POS.CUSTOM_FIELD6 AS TRANSACTION_CODE,
    POS.SHIP_DATE    AS REPORTED_SHIP_DATE,
    POS.CUSTOM_FIELD5 AS REPORTED_BRANCH_ID,
    POS.SHIP_QTY AS RESALE_QUANTITY,

    POS.CUSTOM_FIELD7 AS DISTRIBUTOR_SHIP_TO_CUSTOMER_IDENTIFIER,
    POS.CUSTOM_FIELD8 AS DISTRIBUTOR_SHIP_TO_CUSTOMER_NAME,
    COALESCE(POS.CUSTOM_FIELD9,'UNK') AS DISTRIBUTOR_END_CUSTOMER_IDENTIFIER,
    COALESCE(POS.CUSTOM_FIELD10,'UNKNOWN') AS DISTRIBUTOR_END_CUSTOMER_NAME,
    CASE
    WHEN POS.INVOICE_LINE_NUM IS NOT NULL 
    THEN REPLACE(SUBSTR(POS.INVOICE_NUM, 1, LENGTH(POS.INVOICE_NUM) - (LENGTH(POS.INVOICE_LINE_NUM)+1)), 'P-', '')
    ELSE REPLACE (POS.INVOICE_NUM, 'P-', '')
    END AS DISTRIBUTOR_INVOICE_NUMBER,
    POS.CUSTOM_FIELD15 AS DISTRIBUTOR_INVOICE_LINE_NUMBER,

    POS.CUSTOM_FIELD17 AS REGISTRATION_NUMBER,
    POS.DEBIT_NUM AS  DEBIT_NUMBER,
    POS.CUSTOM_FIELD14 AS DISTRIBUTOR_PO_NUMBER,
    CURR.CODE AS TRANSACTION_CURRENCY_ISO_CODE,
--- RESALE AMOUNT
    DEBIT_SCHED.ADR_DENOM AS RESALE_UNIT_PRICE,
    DEBIT_SCHED.ACCEPTED_DISTI_RESALE AS RESALE_UNIT_PRICE_USD,
    DEBIT_SCHED.ADR_DENOM * POS.SHIP_QTY AS RESALE_NET_AMOUNT,
    DEBIT_SCHED.ACCEPTED_DISTI_RESALE * POS.SHIP_QTY AS RESALE_NET_AMOUNT_USD,
    DEBIT_SCHED.ADR_DENOM * POS.SHIP_QTY / EUR.EXCHANGE_RATE AS RESALE_NET_AMOUNT_EUR, 
    DEBIT_SCHED.ADR_DENOM * POS.SHIP_QTY / JPY.EXCHANGE_RATE AS RESALE_NET_AMOUNT_JPY, 
-- DISTRIBUTOR AMOUNT
    DEBIT_SCHED.ADC_DENOM AS DISTRIBUTOR_UNIT_PRICE,
    DEBIT_SCHED.ACCEPTED_DISTI_COST AS DISTRIBUTOR_UNIT_PRICE_USD,
    DEBIT_SCHED.ADC_DENOM * POS.SHIP_QTY AS DISTRIBUTOR_COST_AMOUNT,
    DEBIT_SCHED.ACCEPTED_DISTI_COST * POS.SHIP_QTY AS DISTRIBUTOR_COST_AMOUNT_USD,
    DEBIT_SCHED.ADC_DENOM * POS.SHIP_QTY / EUR.EXCHANGE_RATE AS DISTRIBUTOR_COST_AMOUNT_EUR, 
    DEBIT_SCHED.ADC_DENOM * POS.SHIP_QTY / JPY.EXCHANGE_RATE AS DISTRIBUTOR_COST_AMOUNT_JPY, 

    'POS' AS SOURCE_DATA_FROM,
    POS.CREATED_DATE AS ONSALES_CREATE_DATE,
    POS.MODIFIED_DATE AS ONSALES_MODIFIED_DATE,
    CASE 
        WHEN POS.CUSTOM_FIELD19 = 'Y' 
            THEN 'N'
        WHEN SUBSTRING(PART.PRODUCT_DIVISION,1,3) ='FHS' AND POS.SHIP_DATE>='2018-06-25' 
            THEN 'N' 
        ELSE 'Y'
    END:: BOOLEAN IS_TRUE_POS,
    CASE
        WHEN DIRECT_CUST.BUSINESS_CLASS_CODE IN ('OEM','EMSI')
            THEN 0
        WHEN DIRECT_CUST.BUSINESS_CLASS_CODE = 'CIPO' AND NOT(CIPO.IS_POS_FLAG)
            THEN 0 
        WHEN DIRECT_CUST.BUSINESS_CLASS_CODE = 'CIPO' AND DIRECT_CUST.CORPORATION_CODE IN ('PERN','CRAC','SNNS','KSGC','YYST') 
            THEN 0
        WHEN IS_TRUE_POS = 'Y' -- ORACLE FLAG
            THEN 1 
        ELSE 0 
    END:: BOOLEAN AS  IS_SDM_TRUE_POS, 
    CASE 
        WHEN POS.CUSTOM_FIELD19 ='Y' 
            THEN 1 
        ELSE 0 
    END :: BOOLEAN AS IS_VAR,
    CASE 
        WHEN POS.CUSTOM_FIELD8 = POS.CUSTOM_FIELD10 AND SHIP_CUST.END_CORPORATION_CODE IS NOT NULL 
            THEN 'INDEndCorp-ShipEndMatch'
        WHEN POS.CUSTOM_FIELD8 = POS.CUSTOM_FIELD10 AND SHIP_CUST.END_CORPORATION_CODE IS  NULL 
            THEN 'INDCorp-NoINDEnd-ShipEndMatch'
        WHEN END_CUST.CORPORATION_CODE IS NULL AND SHIP_CUST.END_CORPORATION_CODE IS NOT NULL  
            THEN 'INDEndCorp-NoPOSEnd'
        WHEN END_CUST.CORPORATION_CODE IS NOT NULL
            THEN 'POSEndDefined'
        WHEN SHIP_CUST.END_CORPORATION_CODE IS NULL 
            THEN 'INDCorp-NoINDEnd'
        ELSE 'DIRCorp-NoINDCorp'
    END    AS END_CORPORATION_DECODE,
    '{{V_START_DTTM}}'::TIMESTAMP_NTZ BIW_INS_DTTM ,
    '{{V_START_DTTM}}'::TIMESTAMP_NTZ BIW_UPD_DTTM ,
    {{V_BIW_BATCH_ID}} AS BIW_BATCH_ID ,
    'N'::BOOLEAN BIW_LOGICAL_DELETE_FLAG
FROM 
POS_DATA  POS

LEFT JOIN POS_FISCAL_DATE_OVERRIDE POS_OVERRIDE
    ON POS.SHIP_DATE::DATE = POS_OVERRIDE.REPORTED_DATE::DATE 

LEFT JOIN MODELN_PART AS PART
    ON POS.PART_OID = PART.OID

----------- DIRECT CUSTOMER & CORP ------------------------------
LEFT JOIN MODELN_CUST_CORP AS DIRECT_CUST
    ON POS.CUSTOM_FIELD16 = DIRECT_CUST.CUSTOMER_CODE

----------- SHIP TO ADDRESS, CUSTOMER & CORP ------------------------------
LEFT JOIN ADDRESS  SHIP_ADDRESS 
    ON POS.CUSTOM_FIELD7 || ':' || POS.CUSTOM_FIELD16 = SHIP_ADDRESS.ADDRESS5
LEFT JOIN MODELN_CUST_CORP AS SHIP_CUST
    ON SHIP_ADDRESS.CODE = SHIP_CUST.CUSTOMER_CODE


----------- END CUSTOMER ADDRESS, CUSTOMER & CORP ------------------------------
LEFT JOIN ADDRESS  END_ADDRESS  
    ON  POS.CUSTOM_FIELD9 || ':' || POS.CUSTOM_FIELD16 = END_ADDRESS.ADDRESS5
LEFT JOIN MODELN_CUST_CORP AS END_CUST
    ON END_ADDRESS.CODE = END_CUST.CUSTOMER_CODE
    AND END_CUST.CUSTOMER_NAME NOT IN ('UNKNOWN CUSTOMERS', 'CHINA RESALE', 'TAIWAN RESALE', 'KOREA RESALE', 'FOXCONN', 'MISSING CUSTOMER','MULTIPLE')

LEFT JOIN DEBIT_SCHEDULE AS DEBIT_SCHED 
    ON  POS.OID = DEBIT_SCHED.POS_DATA_OID
------------------------- TRUE SDM FLAG ---------------------
LEFT JOIN CIPO_POS_REPORTING_MATRIX CIPO 
    ON COALESCE(POS_OVERRIDE.FISCAL_DATE, POS.SHIP_DATE)::DATE BETWEEN CIPO.FROM_DATE AND CIPO.TO_DATE
    AND DIRECT_CUST.CORPORATION_CODE = CIPO.DIRECT_CORPORATION_CODE

---------- CROSS REFERENCE CHECK ON MPN AND IPN-------------------	
    --- FINDING USING DIRECT CUSTOMER
LEFT JOIN MPN_IPN_XREF AS IPN_REF_DIR_CUST
    ON PART.MPN = IPN_REF_DIR_CUST.MPN
    AND  POS.CUSTOM_FIELD16 = IPN_REF_DIR_CUST.CUST5_CODE
    AND  COALESCE(POS_OVERRIDE.FISCAL_DATE, POS.SHIP_DATE) BETWEEN IPN_REF_DIR_CUST.START_DATE AND IPN_REF_DIR_CUST.END_DATE
    AND IPN_REF_DIR_CUST.END_CORP_CODE IS NULL
    --- FINDING USING END CORP CUSTOMER
LEFT JOIN MPN_IPN_XREF AS IPN_REF_END_CORP
    ON PART.MPN = IPN_REF_END_CORP.MPN
    AND  DER_END_CORPORATION_CODE = IPN_REF_END_CORP.END_CORP_CODE
    AND COALESCE(POS_OVERRIDE.FISCAL_DATE, POS.SHIP_DATE)  BETWEEN IPN_REF_END_CORP.START_DATE AND IPN_REF_END_CORP.END_DATE
    AND IPN_REF_END_CORP.CUST5_CODE IS NULL
    --- FINDING USING DIRECT LOOKUP
LEFT JOIN MPN_IPN_XREF AS IPN_REF_DIR_MPN
    ON PART.MPN = IPN_REF_DIR_MPN.MPN
    AND COALESCE(POS_OVERRIDE.FISCAL_DATE, POS.SHIP_DATE) BETWEEN IPN_REF_DIR_MPN.START_DATE AND IPN_REF_DIR_MPN.END_DATE
    AND IPN_REF_DIR_MPN.CUST5_CODE IS NULL
    AND IPN_REF_DIR_MPN.END_CORP_CODE IS NULL
    AND IPN_REF_DIR_MPN.CURRENT_DEFAULT_IPN::BOOLEAN = 'TRUE'

---------- CURRENCY CONVERSION --------------------------------------------------
LEFT JOIN CURRENCY_INFO AS CURR
    ON  DEBIT_SCHED.ADR_CURRENCY_INFO_OID = CURR.OID

LEFT JOIN DATE DT
    ON COALESCE(POS_OVERRIDE.FISCAL_DATE, POS.SHIP_DATE)=DT.CALENDAR_DATE

LEFT JOIN CURRENCY EUR
    ON EUR.FISCAL_MTH_NUM = DT.FISCAL_MONTH_KEY 
    AND EUR.TO_CURRENCY_CODE  = 'EUR'
    AND EUR.FROM_CURRENCY_CODE = CURR.CODE 

LEFT JOIN CURRENCY JPY
    ON JPY.FISCAL_MTH_NUM = DT.FISCAL_MONTH_KEY
    AND JPY.TO_CURRENCY_CODE  = 'JPY'
    AND JPY.FROM_CURRENCY_CODE = CURR.CODE


WHERE CR_FLAG <> 'Y' --claims
    AND REVERSAL_STATUS IS NULL 
    AND STATUS in ('Accepted', 'POS_Only') 
    AND CUSTOM_FIELD3 IS NOT NULL
    AND (SHIP_CUST.BUSINESS_CLASS_CODE NOT IN ('DIST','CIPO','D3PL') OR SHIP_CUST.BUSINESS_CLASS_CODE IS NULL)
)

SELECT 
    TRANSACTION_KEY,
----------------FK --------------------------------    
    FISCAL_SHIP_DATE_KEY,
    DIRECT_CUSTOMER_KEY,
    INDIRECT_CUSTOMER_KEY,
    END_CUSTOMER_KEY,
    DIRECT_CORPORATION_KEY,
    INDIRECT_CORPORATION_KEY,
    END_CORPORATION_KEY,
    PRODUCT_KEY AS MARKET_PRODUCT_NUMBER_KEY,
    INTERNAL_PART_NUMBER_KEY,
    
----------------CODE --------------------------------
    TRANSACTION_ID,
    FISCAL_SHIP_DATE,
    DIRECT_CUSTOMER_CODE,
    INDIRECT_CUSTOMER_CODE,
    END_CUSTOMER_CODE,
    DIRECT_CORPORATION_CODE,
    INDIRECT_CORPORATION_CODE,
    DER_END_CORPORATION_CODE AS END_CORPORATION_CODE,
    PRODUCT_ID AS MARKET_PRODUCT_NUMBER,
    INTERNAL_PART_NUMBER,
    
--------------- OTHER ATTRIBUTES ---------------
    TRANSACTION_CODE,
    REPORTED_SHIP_DATE,
    REPORTED_BRANCH_ID,
    RESALE_QUANTITY,
    DISTRIBUTOR_SHIP_TO_CUSTOMER_IDENTIFIER,
    DISTRIBUTOR_SHIP_TO_CUSTOMER_NAME,
    DISTRIBUTOR_END_CUSTOMER_IDENTIFIER,
    DISTRIBUTOR_END_CUSTOMER_NAME,
    DISTRIBUTOR_INVOICE_NUMBER,
    DISTRIBUTOR_INVOICE_LINE_NUMBER,
    REGISTRATION_NUMBER,
    DEBIT_NUMBER,
    DISTRIBUTOR_PO_NUMBER,
    TRANSACTION_CURRENCY_ISO_CODE,
    RESALE_UNIT_PRICE,
    RESALE_UNIT_PRICE_USD,
    RESALE_NET_AMOUNT,
    RESALE_NET_AMOUNT_USD,
    RESALE_NET_AMOUNT_EUR,
    RESALE_NET_AMOUNT_JPY,
    DISTRIBUTOR_UNIT_PRICE,
    DISTRIBUTOR_UNIT_PRICE_USD,
    DISTRIBUTOR_COST_AMOUNT,
    DISTRIBUTOR_COST_AMOUNT_USD,
    DISTRIBUTOR_COST_AMOUNT_EUR,
    DISTRIBUTOR_COST_AMOUNT_JPY,
    SOURCE_DATA_FROM,
    ONSALES_CREATE_DATE,
    ONSALES_MODIFIED_DATE,
    IS_TRUE_POS,
    IS_SDM_TRUE_POS,
    IS_VAR,
    END_CORPORATION_DECODE,
    BIW_INS_DTTM,
    BIW_UPD_DTTM,
    BIW_BATCH_ID,
    md5(object_construct ('col1',TRANSACTION_KEY::string, 'col2',FISCAL_SHIP_DATE_KEY::string,
    'col3',DIRECT_CUSTOMER_KEY::string, 'col4',INDIRECT_CUSTOMER_KEY::string, 'col5',END_CUSTOMER_KEY::string, 'col6',DIRECT_CORPORATION_KEY::string,
    'col7',INDIRECT_CORPORATION_KEY::string, 'col8',END_CORPORATION_KEY::string, 'col9',PRODUCT_KEY::string, 'col10',INTERNAL_PART_NUMBER_KEY::string,
    'col11',FISCAL_SHIP_DATE::string, 'col12',PRODUCT_ID::string, 'col13',INTERNAL_PART_NUMBER::string, 'col14',DIRECT_CUSTOMER_CODE::string,
    'col15',INDIRECT_CUSTOMER_CODE::string, 'col16',END_CUSTOMER_CODE::string, 'col17',DIRECT_CORPORATION_CODE::string, 'col18',INDIRECT_CORPORATION_CODE::string,
    'col19',END_CORPORATION_CODE::string, 'col20',TRANSACTION_CODE::string, 'col21',REPORTED_SHIP_DATE::string, 'col22',REPORTED_BRANCH_ID::string,
    'col23',RESALE_QUANTITY::string, 'col24',DISTRIBUTOR_SHIP_TO_CUSTOMER_IDENTIFIER::string, 'col25',DISTRIBUTOR_SHIP_TO_CUSTOMER_NAME::string,
    'col26',DISTRIBUTOR_END_CUSTOMER_IDENTIFIER::string, 'col27',DISTRIBUTOR_END_CUSTOMER_NAME::string, 'col28',DISTRIBUTOR_INVOICE_NUMBER::string,
    'col29',DISTRIBUTOR_INVOICE_LINE_NUMBER::string, 'col30',REGISTRATION_NUMBER::string, 'col31',DEBIT_NUMBER::string, 'col32',DISTRIBUTOR_PO_NUMBER::string,
    'col33',TRANSACTION_CURRENCY_ISO_CODE::string, 'col34',RESALE_UNIT_PRICE::string, 'col35',RESALE_UNIT_PRICE_USD::string, 'col36',RESALE_NET_AMOUNT::string,
    'col37',RESALE_NET_AMOUNT_USD::string, 'col38',RESALE_NET_AMOUNT_EUR::string, 'col39',RESALE_NET_AMOUNT_JPY::string, 'col40',DISTRIBUTOR_UNIT_PRICE::string,
    'col41',DISTRIBUTOR_UNIT_PRICE_USD::string, 'col42',DISTRIBUTOR_COST_AMOUNT::string, 'col43',DISTRIBUTOR_COST_AMOUNT_USD::string,
    'col44',DISTRIBUTOR_COST_AMOUNT_EUR::string, 'col45',DISTRIBUTOR_COST_AMOUNT_JPY::string, 'col46',SOURCE_DATA_FROM::string, 'col47',ONSALES_CREATE_DATE::string,
    'col48',ONSALES_MODIFIED_DATE::string, 'col49',IS_TRUE_POS::string, 'col50',IS_SDM_TRUE_POS::string, 'col51',IS_VAR::string,
    'col52',END_CORPORATION_DECODE::string, 'col53',BIW_LOGICAL_DELETE_FLAG::string)::string ) as BIW_MD5_KEY,
    BIW_LOGICAL_DELETE_FLAG
FROM FINAL_SQL
