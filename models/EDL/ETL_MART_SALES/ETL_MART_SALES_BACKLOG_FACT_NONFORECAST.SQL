/*---------------------------------------------------------------------------
Command to run model:
--dbt run --select ETL_MART_SALES_BACKLOG_FACT_NONFORECAST
--dbt run --select ETL_MART_SALES_BACKLOG_FACT_NONFORECAST --vars 'is_backfill: True'

Version     Date            Author              Description
-------     --------        -----------         ----------------------------------
1.0         05 OCT 2022      Vinay Subramanian  Initial Version
1.1         10 OCT 2022      VINAYAKA CN        Filling up the TBD's
2.0         16 DEC 2022      Vinay Subramanian  Corrected Currency_exchange logic
3.0         02/10/2023       Vinay Subramanian  Replaced Currency_exchange logic with Mart_currency
4.0         18-APR-2023      Kali D             Modeln is not handling inactive customer properly hence we have to get customer details from Mart
5.0         19-APR-2023      Mattuvarkulali M   Added new column ODM_END_CORP_CD
---------------------------------------------------------------------------*/

{################# EDW Job Template Variables #################}
{%-set v_pk_list = ['BACKLOG_KEY']-%}
{% if  is_incremental() %}
{%-set v_house_keeping_column = ['BIW_INS_DTTM','BIW_UPD_DTTM','BIW_BATCH_ID','BIW_MD5_KEY']-%}
{%-set v_md5_column_list =  edw_get_md5_column_list( this ,v_pk_list|list+ v_house_keeping_column|list ) -%}
{%-set v_all_column_list =  edw_get_column_list( this ) -%}
--DBT Variable
--SELECT {{v_all_column_list}}
--SELECT {{v_md5_column_list}}
{% endif %}

{################# Batch control insert and update SQL #################}
{%- set v_dbt_job_name = 'DBT_ETL_MART_SALES_BACKLOG_FACT_NONFORECAST'-%}
-- Step 1 Batch process info
{%- set v_watermark = edw_batch_control(v_dbt_job_name,config.get('schema'),config.get('alias') ,config.get('tags'),config.get('materialized') ) -%}
{%- set V_LWM = v_watermark[0] -%}
{%- set V_HWM = v_watermark[1] -%}
{%- set V_START_DTTM = v_watermark[2] -%}
{%- set V_BIW_BATCH_ID = v_watermark[3] -%}
{%- set v_sql_upd_success_batch = "CALL UTILITY.EDW_BATCH_SUCCESS_PROC('"~v_dbt_job_name~"')" -%}

{################# Snowflake Object Configuration #################}
{{
    config(
         description = 'Building table BACKLOG_FACT for MART_SALES'
        ,transient=true
        ,materialized='table'
        ,schema ='ETL_MART_SALES'
        ,alias='BACKLOG_FACT_NONFORECAST'
		,unique_key= v_pk_list
        ,tags =['MART_SALES']
		,post_hook= [v_sql_upd_success_batch]	
        )
}}

WITH BKLG_ACT_OBR AS (
    SELECT
        MD5(OBJECT_CONSTRUCT ('COL1',ACTIVITY::STRING
                            , 'COL2',REGION::STRING
                            , 'COL3',SALES_ORDER::STRING
                            , 'COL4',SALES_ORDER_LINE::STRING
                            , 'COL5',SALES_ORDER_LINE_LINE::STRING
                            , 'COL6',JOURNAL_DESCRIPTION::STRING
                            , 'COL7',PROCESS_DT::STRING
                            , 'COL8',ROW_NUMBER() OVER(PARTITION BY 
                                                        ACTIVITY,
                                                        REGION,
                                                        SALES_ORDER,
                                                        SALES_ORDER_LINE,
                                                        SALES_ORDER_LINE_LINE,
                                                        JOURNAL_DESCRIPTION,
                                                        PROCESS_DT                        
                                                    ORDER BY BIW_UPD_DTTM )::STRING)::STRING ) AS BACKLOG_KEY, 
        ACCRUAL_NET_AMOUNT_USD,
        ACCRUAL_CATEGORY ,
        ACCRUAL_COMMENTS ,
        ACCRUAL_FACTOR ,
        OBR_RULEID AS ACCRUAL_RULE_ID,
        OBR_RULESET AS ACCRUAL_RULE_SET,
        ACCRUAL_TRANSACTION_DATE,
        ACCRUAL_TYPE,
        ACTIVITY AS ORIGINAL_ACTIVITY,
        NVL(ACCRUAL_CATEGORY, ACTIVITY) AS ACTIVITY,
        TRX_AMT,
        ACCRUAL_NET_AMOUNT,
        OPEN_QUANTITY,
        BILL_SOURCE_CD,
        BOOKING_AND_BILLING_CD,
        RSD_DT,
        MSD_DT,
        CRD_DT,
        CREDIT_ACCOUNT,
        NVL(TRANSIT_DAYS,0) AS TRANSIT_DAYS,
        CONTRACT_CURRENCY,
        ACC_NET_AMT_CONTRACT_CURRENCY,
        TRX_AMT_CONTRACT_CURRENCY,
        CPN,
        CUST_PO_NUMBER,
        DEBIT_ACCOUNT,
        DELIVERY_REQUEST_DATE,
        DEMAND_BANK,
        DEMAND_TYPE,
        SHIP_TO_CUST_CD,
        PART_ID, 
        INVOICED_QUANTITY,
        JOURNAL_DESCRIPTION,
        LINE_STATUS,
        PROCESS_DT,
        ACCRUAL_ID,
        OPERATING_UNIT,
        ORDER_STATUS,
        PRICE_SOURCE,
        SALES_ORDER_LINE_LINE,
        SALES_ORDER_LINE,
        SALES_ORDER,
        REGION,
        NVL(SOLD_TO_CUST_CD,'UNK') AS SOLD_TO_CUST_CD,
        TRANSACTION_DATE,
        TRUE_BACKLOG_FLAG,
        TRX_UNIT_PRICE,
        TRX_UNIT_PRICE_USD,
        CASE 
            WHEN ACTIVITY = 'Cancelled Delivery.' 
                THEN 'XX'
            ELSE 'SC' 
        END DLVRY_STATUS_CD,
        CASE 
            WHEN ACTIVITY = 'Cancelled Delivery.' 
                THEN 'XX'
            ELSE 'SC' 
        END LINE_LINE_STATUS_FORECAST,
        LINE_LINE_STATUS AS	LINE_LINE_STATUS_NONFORECAST,
        TRANSACTION_CURRENCY,
        DELIVERY_STATUS,
        ACCRUAL_STATUS,
        FILE_NAME
	FROM {{source('STG_EBS_APPS','BKLG_ACT_OBR')}} 
    WHERE 
        {% if var('is_backfill') %}
            BIW_UPD_DTTM >= '{{var('refresh_start_ts')}}'
            AND BIW_UPD_DTTM < '{{V_START_DTTM}}'
        {% else %}
            BIW_UPD_DTTM >= '{{V_LWM}}' 
            AND BIW_UPD_DTTM < '{{V_HWM}}'
        {% endif %}  
),
ACTIVITY_MATRIX_LKP AS (
    SELECT 
        BKLG_BILL_ACT_DESC,
        CATEGORY_DESC
	FROM  {{source('STG_ONE_STAGE','ACTIVITY_MATRIX_LKP')}} 
	WHERE BKLG_BILL_DESC ='BACKLOG'
	QUALIFY (ROW_NUMBER() OVER (PARTITION BY BKLG_BILL_ACT_DESC 
		  ORDER BY BKLG_BILL_ACT_ID DESC,BIW_UPD_DTTM DESC )=1)
),
XXON_INV_CUSTITEM_XREF_V_CUST AS (
    SELECT
        CUST_CODE  AS CUST_CD,
        CUST_PART_NUMBER AS CPN,
        PART_NUMBER AS PRODUCT_ID,
        CUST_OF_INTEREST_TXT AS CUSTOMER_OF_INTEREST,
        REV_PART_NUM AS CP_REV_PROD_ID,
        ROLE 
	FROM {{source('STG_EBS_APPS','XXON_INV_CUSTITEM_XREF_V')}} 
    WHERE ROLE='CUST'
	QUALIFY (ROW_NUMBER() OVER (PARTITION BY CUST_PART_NUMBER,PART_NUMBER,CUST_CODE ORDER BY BIW_UPD_DTTM DESC )=1)
),
XXON_INV_CUSTITEM_XREF_V_COG AS (
    SELECT
        CUST_CODE  AS CUST_CD,
        CUST_PART_NUMBER AS CPN,
        PART_NUMBER AS PRODUCT_ID,
        CUST_OF_INTEREST_TXT AS CUSTOMER_OF_INTEREST,
        REV_PART_NUM AS CP_REV_PROD_ID,
        ROLE 
	FROM {{source('STG_EBS_APPS','XXON_INV_CUSTITEM_XREF_V')}} 
    WHERE ROLE='COG'
	QUALIFY (ROW_NUMBER() OVER (PARTITION BY CUST_PART_NUMBER,PART_NUMBER,CUST_CODE ORDER BY BIW_UPD_DTTM DESC )=1)
),    
/*
 KALI D: APR-18-2023 Modeln is not handling inactive customer properly hence we have to get customer details from Mart
*/
CUSTOMER_DETAILS AS(
    SELECT
        CUSTOMER_CODE,
        BUSINESS_CLASS_CODE,
        CORPORATION_CODE CORP_CD,
        CRD_SHIP_EARLY_DAYS_QUANTITY
    FROM {{ref('MART_SALES_CUSTOMER')}}
),
FMS_LOC AS (
    SELECT 
        UDC_SPA_CD AS SPA_CODE,
        UDC_GENERIC_PROG_DESC AS FMS_SERVICE_PROGRAM,
        UDC_SPA_NAME AS SPA_NAME,
        UDC_LIABILITY_AGREEMENT AS  LIABILITY_AGREEMENT,
        UDC_OH_SUBINV AS SOURCE_DEMAND_BANK,
        UDC_INV_LIA_CONTRACT AS INVENTORY_INSURANCE_COVERAGE,
        LOC
	FROM {{source('STG_FMS_FMS_OWNER','STG_LOC_DW_OUT')}} 
	QUALIFY( ROW_NUMBER() OVER (PARTITION BY LOC ORDER BY BIW_UPD_DTTM DESC)=1)
),
BILLING_FACT AS (
    SELECT 
        REGION,
        SALES_ORDER AS SALES_ORDER_NUMBER,
        SALES_ORDER_LINE AS SALES_ITEM_NUMBER,
        SALES_ORDER_LINE_LINE AS SALES_DELIVERY_NUMBER,
        MAX(BILLING_DOCUMENT_NUMBER) AS BILLING_DOCUMENT_NUMBER
    FROM         
        {{source('STG_EBS_APPS','BILL_ACTIVITY_ALL_OBR')}} 
	WHERE PROCESS_DT >= CURRENT_DATE() - 60 
    GROUP BY REGION,SALES_ORDER_NUMBER,SALES_ITEM_NUMBER,SALES_DELIVERY_NUMBER 
), 
ORDER_HDR AS (
    SELECT 
        SALES_ORDER_NUM,
        BPO_FLAG,
        SUBSTR(END_CUST_CD,1,4) AS CUST_IF_END,
        HANDLING_METHOD_CD AS HANDLING_CODE,
        ORA_ORDER_TYPE,
        SUBSTRING(ORDER_SOURCE_CD,1,1) AS ORDER_SOURCE,
        ORDER_TYPE
    FROM {{ref('ODS_EBS_ORDER_HDR')}}
   
),
ORDER_DELIVERY AS (
    SELECT 
        ORDRPROC_REGION_CD AS REGION_ID,
        SALES_ORDER_NUM AS SALES_ORDER_NUMBER,
        SALES_ITEM_NUM AS ORDER_ITEM_SEQ_NUMBER,
        SALES_DELIVERY_NUM AS DELIVERY_SEQ_NUMBER,
        COI,
        CREATE_DTME AS CREATE_TIMESTAMP,
        CUST_PART_ID AS CPN,
        DEMAND_BANK_CD AS DEMAND_BANK,
        SALES_QUOTE_NUM,
        SUBSTR(CUSPA_NUMBER,1,11) CUS_PA_NUM,
        CUST_RECPT_BANK_CD AS CUSTOMER_RECEIPT_BANK,
        DEMAND_CLASS,
        DLVRY_STATUS_DTME,
        SUBSTR(END_CUST_CD,1,4) AS END_CORP,
        NNCO,
        NNCO_AGREEMENT_TYPE,
        ORA_DLVRY_STATUS_CD,
        DLVRY_STATUS_CD AS SALES_ORDER_STATUS,
        SALES_ITEM_NUM||'.'||ORA_SHIPMENT_NUM AS ORA_LINE_NUM,
        ORA_ORDER_DLVRY_SRC_CD,
        ORA_ORDER_NUM,
        SUBSTR(ORDR_DLVRY_SRC_TXT,1,1) AS ORDER_DELVRY_SRC_CD,
        PLANNED_DLVRY_DT AS PLANNED_DELIVERY_DATE,
        REQUESTED_SHIP_DT AS REQUESTED_SHIP_DATE,
        RESCH_DELIVERY_DT AS RESCHEDULED_DELIVERY_DATE,
        NVL(SHIP_CONFIRMED_QTY ,0) AS SHIP_CONFIRM_QUANTITY,
        SUBSTR(U_PRICE_SOURCE_CD,1,1) AS UNIT_PRICE_SOURCE_CD,
        PICK_ALLOC_QTY,
        PART_ID AS INTERNAL_PN,
        HOLD_STATUS_CD,
        ODM_END_CORP_CD,
        BIW_UPD_DTTM
    FROM {{ref('ODS_EBS_ORDER_DELIVERY')}}
  
),
ORDER_HOLD_STATUS AS (
    SELECT 
        ORDER_HOLD_ID,
        SALES_ORDER_NUM,
        SALES_ITEM_NUM,
        SALES_DELIVERY_NUM,
        HOLD_TYPE
    FROM
        (SELECT 
            ORDER_HOLD_ID,
            SALES_ORDER_NUM,
            SALES_ITEM_NUM,
            SALES_DELIVERY_NUM,
            HOLD_TYPE,
            RELEASED_FLG,
            ORDER_LINE_ID
        FROM {{source('STG_EBS_APPS','ORDER_HOLD_STATUS')}}
        QUALIFY (ROW_NUMBER() OVER(PARTITION BY ORDER_HOLD_ID  ORDER BY BIW_UPD_DTTM DESC)=1)  
        ) 
    WHERE RELEASED_FLG = 'N'
    AND ORDER_LINE_ID IS NOT NULL
    QUALIFY (ROW_NUMBER() OVER(PARTITION BY    SALES_ORDER_NUM,    SALES_ITEM_NUM,    SALES_DELIVERY_NUM   ORDER BY ORDER_HOLD_ID DESC )=1) 
)
,ORDER_DETAIL AS (
    SELECT 
        ORD_DLVRY.REGION_ID,
        ORD_DLVRY.SALES_ORDER_NUMBER,
        ORD_DLVRY.ORDER_ITEM_SEQ_NUMBER,
        ORD_DLVRY.DELIVERY_SEQ_NUMBER,
        ORD_DLVRY.SALES_ORDER_STATUS,
        ORD_HDR.BPO_FLAG,  
        ORD_HDR.HANDLING_CODE,
        ORD_HDR.ORA_ORDER_TYPE,
        ORD_HDR.ORDER_SOURCE,
        ORD_HDR.ORDER_TYPE,
        ORD_HDR.CUST_IF_END,
        ORD_DLVRY.COI,
        ORD_DLVRY.CREATE_TIMESTAMP,
        ORD_DLVRY.CPN,
        ORD_DLVRY.INTERNAL_PN,
        ORD_DLVRY.DEMAND_BANK,
        ORD_DLVRY.SALES_QUOTE_NUM,
        ORD_DLVRY.CUS_PA_NUM,
        ORD_DLVRY.CUSTOMER_RECEIPT_BANK,
        ORD_DLVRY.DEMAND_CLASS,
        ORD_DLVRY.DLVRY_STATUS_DTME,
        ORD_DLVRY.END_CORP,
        ORD_DLVRY.NNCO,
        ORD_DLVRY.NNCO_AGREEMENT_TYPE,
        ORD_DLVRY.ORA_DLVRY_STATUS_CD,
        ORD_DLVRY.ORA_LINE_NUM,
        ORD_DLVRY.ORA_ORDER_DLVRY_SRC_CD,
        ORD_DLVRY.ORA_ORDER_NUM,
        ORD_DLVRY.ORDER_DELVRY_SRC_CD,
        ORD_DLVRY.PLANNED_DELIVERY_DATE,
        ORD_DLVRY.REQUESTED_SHIP_DATE,
        ORD_DLVRY.RESCHEDULED_DELIVERY_DATE,
        ORD_DLVRY.SHIP_CONFIRM_QUANTITY,
        ORD_DLVRY.UNIT_PRICE_SOURCE_CD,
        ORD_HLD.HOLD_TYPE AS  HOLD_STATUS ,
        ORD_DLVRY.HOLD_STATUS_CD,
        PICK_ALLOC_QTY AS PICK_ALLOCATION_QUANTITY,
        ORD_DLVRY.ODM_END_CORP_CD,
        ORD_DLVRY.BIW_UPD_DTTM
    FROM 
    ORDER_HDR ORD_HDR
    INNER JOIN ORDER_DELIVERY ORD_DLVRY
        ON ORD_HDR.SALES_ORDER_NUM=ORD_DLVRY.SALES_ORDER_NUMBER
    LEFT JOIN ORDER_HOLD_STATUS ORD_HLD
        ON ORD_DLVRY.SALES_ORDER_NUMBER = ORD_HLD.SALES_ORDER_NUM
        AND ORD_DLVRY.ORDER_ITEM_SEQ_NUMBER = ORD_HLD.SALES_ITEM_NUM
        AND ORD_DLVRY.DELIVERY_SEQ_NUMBER = ORD_HLD.SALES_DELIVERY_NUM
),
ORDER_HEADER_LATEST AS (
    SELECT 
        REGION_ID,
        SALES_ORDER_NUMBER,
        BPO_FLAG,
        CUST_IF_END,
        HANDLING_CODE,
        HOLD_STATUS,
        ORDER_SOURCE,
        ORDER_TYPE,
        ORA_ORDER_TYPE    
    FROM 
    ORDER_DETAIL
    QUALIFY (ROW_NUMBER() OVER(PARTITION BY  SALES_ORDER_NUMBER  ORDER BY ORDER_ITEM_SEQ_NUMBER DESC, DELIVERY_SEQ_NUMBER DESC )=1) 
),
ORDER_LINE_ITEM AS (
    SELECT 
        REGION_ID,
        SALES_ORDER_NUMBER,
        ORDER_ITEM_SEQ_NUMBER,
        CPN,
        DEMAND_BANK,
        CUS_PA_NUM,
        DEMAND_CLASS,
        CREATE_TIMESTAMP,
        HOLD_STATUS,
        SALES_QUOTE_NUM,
        COI
    FROM 
    ORDER_DETAIL
    QUALIFY (ROW_NUMBER() OVER(PARTITION BY  SALES_ORDER_NUMBER,ORDER_ITEM_SEQ_NUMBER  ORDER BY  DELIVERY_SEQ_NUMBER DESC )=1) 
),
FISCAL_MONTH AS(
    SELECT 
        CALENDAR_DATE,
        FISCAL_MONTH_KEY
    FROM 
        {{ source('MART', 'DATE') }}
),

CURRENCY AS
(
SELECT
    CURRENCY_KEY,
    FISCAL_MTH_NUM,
    FROM_CURRENCY_CODE,
    TO_CURRENCY_CODE,
    EXCHANGE_RATE
FROM
   {{ref('MART_CURRENCY_EXCHANGE')}}
),
BKLG_ACT_OBR_FORECAST AS (
    SELECT
        BKLG.BACKLOG_KEY,
        BKLG.ACCRUAL_NET_AMOUNT_USD,
        BKLG.ACCRUAL_CATEGORY ,
        BKLG.ACCRUAL_COMMENTS ,
        BKLG.ACCRUAL_FACTOR ,
        BKLG.ACCRUAL_RULE_ID,
        BKLG.ACCRUAL_RULE_SET,
        BKLG.ACCRUAL_TRANSACTION_DATE,
        BKLG.ACCRUAL_TYPE,
        BKLG.ACTIVITY,
        BKLG.TRX_AMT,
        CASE 
            WHEN NVL (UPPER (BKLG.ACTIVITY), 'XXXXXXXXXXXXX') = 'BACKLOG_ACCRUAL'
                THEN -1 * NVL (ROUND(BKLG.ACCRUAL_NET_AMOUNT,2), 0)
            ELSE NVL (ROUND(BKLG.ACCRUAL_NET_AMOUNT,2), 0) 
        END AS ACCRUAL_NET_AMOUNT,
        BKLG.OPEN_QUANTITY,
        BKLG.BILL_SOURCE_CD,
        BKLG.BOOKING_AND_BILLING_CD,
        BKLG.RSD_DT,
        BKLG.MSD_DT,
        BKLG.CRD_DT,
        BKLG.CREDIT_ACCOUNT,
        BKLG.TRANSIT_DAYS,
        BKLG.CONTRACT_CURRENCY,
        CASE 
            WHEN NVL (UPPER (BKLG.ACTIVITY), 'XXXXXXXXXXXXX') = 'BACKLOG_ACCRUAL'
                THEN -1 * NVL (ROUND(BKLG.ACC_NET_AMT_CONTRACT_CURRENCY,2), 0)
            ELSE NVL (ROUND(BKLG.ACC_NET_AMT_CONTRACT_CURRENCY,2), 0)
        END AS ACC_NET_AMT_CONTRACT_CURRENCY,
        BKLG.TRX_AMT_CONTRACT_CURRENCY,
        BKLG.CUST_PO_NUMBER,
        BKLG.DEBIT_ACCOUNT,
        BKLG.DELIVERY_REQUEST_DATE,
        BKLG.DEMAND_BANK,
        BKLG.DEMAND_TYPE,
        BKLG.SHIP_TO_CUST_CD,
        BKLG.INVOICED_QUANTITY,
        BKLG.JOURNAL_DESCRIPTION,
        BKLG.LINE_STATUS,
        BKLG.PROCESS_DT,
        BKLG.ACCRUAL_ID,
        BKLG.OPERATING_UNIT,
        BKLG.ORDER_STATUS,
        BKLG.PRICE_SOURCE,
        BKLG.SALES_ORDER_LINE_LINE,
        BKLG.SALES_ORDER_LINE,
        BKLG.SALES_ORDER,
        BKLG.REGION,
        BKLG.SOLD_TO_CUST_CD,
        BKLG.TRANSACTION_DATE,
        BKLG.TRUE_BACKLOG_FLAG,
        BKLG.TRX_UNIT_PRICE,
        BKLG.TRX_UNIT_PRICE_USD,
        CUST.BUSINESS_CLASS_CODE,
        CUST.CORP_CD,
        SOI.COI AS COI,
        SOI.CPN AS CPN,
        SOI.CUS_PA_NUM AS CUSPA_NUMBER,
        SOI.HOLD_STATUS AS ITM_HOLD_STATUS, 
        SOI.DEMAND_CLASS,
        DECODE(SOI.CREATE_TIMESTAMP,TO_DATE('01/01/0001','DD/MM/YYYY'),NULL,SOI.CREATE_TIMESTAMP)  AS ENTRY_DT,
        SOI.DEMAND_BANK AS  SOURCE_DEMAND_BANK,
        SOI.SALES_QUOTE_NUM,
        DECODE (SOD.REQUESTED_SHIP_DATE,TO_DATE('01/01/0001','DD/MM/YYYY'),NULL,SOD.REQUESTED_SHIP_DATE) AS  CRSD_DT, 
        SOD.CUSTOMER_RECEIPT_BANK AS CUST_RECPT_BANK_CD,
        SOD.ORDER_DELVRY_SRC_CD AS DELIVERY_SOURCE_CD,
        SOD.DLVRY_STATUS_DTME::DATE AS DLVRY_STATUS_DTME,
        SOD.END_CORP,
        SOD.NNCO::BOOLEAN NNCO,
        SOD.NNCO_AGREEMENT_TYPE,
        SOD.ORA_DLVRY_STATUS_CD,
        SOD.ORA_LINE_NUM,
        SOD.ORA_ORDER_DLVRY_SRC_CD,  
        SOD.ORA_ORDER_NUM,
        SOD.HOLD_STATUS AS DELVRY_HOLD_STATUS,
        SOD.SHIP_CONFIRM_QUANTITY::NUMERIC AS SHIP_CONFIRMED_QTY,
        SOD.UNIT_PRICE_SOURCE_CD,
        SOD.RESCHEDULED_DELIVERY_DATE::DATE AS RESCHEDULED_DELIVERY_DATE,
        SOD.PLANNED_DELIVERY_DATE::DATE PDD_DT,
        SOD.PICK_ALLOCATION_QUANTITY::NUMERIC PICK_QUANTITY,
        CASE 
            WHEN LENGTH(SOD.INTERNAL_PN)>0 
                THEN SOD.INTERNAL_PN
            ELSE BKLG.PART_ID
        END AS INTERNAL_PN,
        NVL(SH.CUST_IF_END,BKLG.SHIP_TO_CUST_CD) AS END_CUST_CD, 
        SH.HANDLING_CODE,
        SH.ORDER_SOURCE AS ORDER_SOURCE_CD,
        SH.ORDER_TYPE AS ORDER_TYPE_CD,
        SH.HOLD_STATUS AS HDR_HOLD_STATUS, 
        CASE 
            WHEN UPPER(SH.ORA_ORDER_TYPE) LIKE '%SAMPLES%' AND CUST.BUSINESS_CLASS_CODE = 'INT-SPS' 
                THEN 'Y'
            ELSE 'N'
        END AS TBSA_SAMPLES_FLG,  
        SH.BPO_FLAG::BOOLEAN AS BLANKET_ORDER_FLAG,
        NULL AS CSR,
        CASE 
            WHEN UPPER(BKLG.ORIGINAL_ACTIVITY) = UPPER(AML.BKLG_BILL_ACT_DESC)
                THEN AML.CATEGORY_DESC 
            ELSE 'UNKNOWN'  
        END AS TRX_CATEGORY,
        FMS_LOC.FMS_SERVICE_PROGRAM,    
        FMS_LOC.INVENTORY_INSURANCE_COVERAGE,
        FMS_LOC.LIABILITY_AGREEMENT,
        FMS_LOC.SPA_CODE,
        FMS_LOC.SPA_NAME,
        CASE 
            WHEN CUST.BUSINESS_CLASS_CODE IN ('OMD', 'INT-SPS')
                THEN 'N'
            WHEN NVL(BKLG.OPEN_QUANTITY,0) = 0
                THEN 'N'
            WHEN BKLG.RSD_DT IS NOT NULL AND BKLG.RSD_DT <> TO_DATE ('01/01/0001', 'DD/MM/YYYY') AND BKLG.RSD_DT <= DATE_TRUNC('DAY',PROCESS_DT) + 92
                THEN 'Y'
            WHEN BKLG.RSD_DT IS NOT NULL AND BKLG.RSD_DT <> TO_DATE ('01/01/0001', 'DD/MM/YYYY') AND BKLG.RSD_DT > DATE_TRUNC('DAY',PROCESS_DT) + 92
                THEN 'N'
            WHEN BKLG.MSD_DT IS NOT NULL AND BKLG.MSD_DT <> TO_DATE ('01/01/0001', 'DD/MM/YYYY') AND  BKLG.MSD_DT <= DATE_TRUNC ('DAY',PROCESS_DT) + 92
                THEN 'Y' 
            ELSE 'N'
        END AS TBSA_BOOKING_FLG,
        BKLG.TRANSACTION_CURRENCY,
        CASE 
            WHEN BKLG.RSD_DT IS NOT NULL  
                THEN (BKLG.RSD_DT - NVL(CUST.CRD_SHIP_EARLY_DAYS_QUANTITY,0))
            WHEN BKLG.MSD_DT IS NOT NULL 
                THEN (BKLG.MSD_DT - NVL(CUST.CRD_SHIP_EARLY_DAYS_QUANTITY,0))
            ELSE NULL 
        END EPSD_DT,
        BKLG.PART_ID as MARKET_PN,
        BKLG.TRX_UNIT_PRICE_USD AS U_PRICE_CRRT_AMT,
        CASE
            WHEN BKLG.DELIVERY_STATUS = 'OP' 
                THEN 'Y' 
            ELSE 'N' 
        END TBSA_WILL_SCHD_FLG,
        BKLG.DLVRY_STATUS_CD,
        BKLG.LINE_LINE_STATUS_FORECAST,
        CASE 
            WHEN NVL (BKLG.ACTIVITY, 'XXXXXXXXXXXXX') <> 'BACKLOG_ACCRUAL'
                THEN NVL (BKLG.TRX_AMT, 0) 
            ELSE 0 
        END LCL_GROSS_AMT,
        CASE 
            WHEN NVL (BKLG.ACTIVITY, 'XXXXXXXXXXXXX') <> 'BACKLOG_ACCRUAL'
                THEN NVL (BKLG.TRX_AMT, 0) 
            ELSE -1 * NVL (BKLG.ACCRUAL_NET_AMOUNT, 0) 
        END LCL_NET_AMT,
        CASE 
            WHEN NVL (BKLG.ACTIVITY, 'XXXXXXXXXXXXX') = 'BACKLOG_ACCRUAL'
                THEN 0 
            ELSE NVL (BKLG.OPEN_QUANTITY, 0) 
        END NET_QTY, 
        CASE 
            WHEN NVL (BKLG.ACTIVITY, 'XXXXXXXXXXXXX') <> 'BACKLOG_ACCRUAL'
                THEN NVL (BKLG.TRX_AMT_CONTRACT_CURRENCY, 0)
            ELSE 0 
        END GROSS_AMT_CONTRACT_CURRENCY,
        CASE 
            WHEN NVL (BKLG.ACTIVITY, 'XXXXXXXXXXXXX') <> 'BACKLOG_ACCRUAL'
                THEN NVL (BKLG.TRX_AMT_CONTRACT_CURRENCY, 0)
            ELSE -1 * NVL (BKLG.ACC_NET_AMT_CONTRACT_CURRENCY, 0)
        END NET_AMT_CONTRACT_CURRENCY,
        BILL.BILLING_DOCUMENT_NUMBER AS INVOICE_NUM,
        BKLG.REGION||BKLG.SALES_ORDER||'-'||LPAD(BKLG.SALES_ORDER_LINE,2,0)||'-'||LPAD(BKLG.SALES_ORDER_LINE_LINE,2,0) AS SALES_ORDER_LI_DL,
        BKLG.REGION||BKLG.SALES_ORDER as SALES_ORDER_NUM,
        LCL_GROSS_AMT AS BACKLOG_GROSS_AMOUNT_TRANSACTION_CURRENCY, 
        LCL_NET_AMT AS BACKLOG_NET_AMOUNT_TRANSACTION_CURRENCY, 
        BKLG.ACCRUAL_STATUS,
        BKLG.FILE_NAME,
        COALESCE(MPN_CUST.CP_REV_PROD_ID,MPN_COG.CP_REV_PROD_ID ) AS CPN_REVISION_CODE,
        SOD.ORA_DLVRY_STATUS_CD ORA_DELIVERY_STATUS_CODE,
        SOD.SALES_ORDER_STATUS  DELIVERY_STATUS_CODE,
        SOD.ODM_END_CORP_CD

    FROM BKLG_ACT_OBR BKLG
    LEFT OUTER JOIN ACTIVITY_MATRIX_LKP AML
        ON UPPER(BKLG.ORIGINAL_ACTIVITY) = UPPER(AML.BKLG_BILL_ACT_DESC)
    LEFT OUTER JOIN XXON_INV_CUSTITEM_XREF_V_CUST MPN_CUST 
        ON BKLG.SHIP_TO_CUST_CD = MPN_CUST.CUST_CD
        AND BKLG.CPN = MPN_CUST.CPN 
        AND BKLG.PART_ID = MPN_CUST.PRODUCT_ID
    LEFT OUTER JOIN XXON_INV_CUSTITEM_XREF_V_COG MPN_COG 
        ON BKLG.SHIP_TO_CUST_CD = MPN_COG.CUST_CD
        AND BKLG.CPN = MPN_COG.CPN 
        AND BKLG.PART_ID = MPN_COG.PRODUCT_ID   
    LEFT OUTER JOIN CUSTOMER_DETAILS CUST
        ON BKLG.SHIP_TO_CUST_CD = CUST.CUSTOMER_CODE
    LEFT OUTER JOIN FMS_LOC FMS_LOC
        ON BKLG.SHIP_TO_CUST_CD = FMS_LOC.LOC
    LEFT OUTER JOIN BILLING_FACT BILL
        ON BKLG.REGION||BKLG.SALES_ORDER = BILL.SALES_ORDER_NUMBER
        AND BKLG.REGION = BILL.REGION
        AND BKLG.SALES_ORDER_LINE = BILL.SALES_ITEM_NUMBER
        AND BKLG.SALES_ORDER_LINE_LINE = BILL.SALES_DELIVERY_NUMBER
    LEFT JOIN ORDER_HEADER_LATEST SH
        ON SH.SALES_ORDER_NUMBER= BKLG.REGION||BKLG.SALES_ORDER 
    LEFT JOIN ORDER_LINE_ITEM AS  SOI
        ON  SOI.SALES_ORDER_NUMBER = BKLG.REGION||BKLG.SALES_ORDER 
        AND SOI.ORDER_ITEM_SEQ_NUMBER = BKLG.SALES_ORDER_LINE
    LEFT JOIN ORDER_DETAIL SOD
        ON SOD.SALES_ORDER_NUMBER = BKLG.REGION||BKLG.SALES_ORDER 
        AND SOD.ORDER_ITEM_SEQ_NUMBER =BKLG.SALES_ORDER_LINE
        AND SOD.DELIVERY_SEQ_NUMBER=BKLG.SALES_ORDER_LINE_LINE
    WHERE BKLG.DEMAND_TYPE <> 'FORECAST'
),    
FINAL_SQL AS (
    SELECT 
        BKF.BACKLOG_KEY,
        ----------------------FK KEY------------------------------
        REPLACE(SUBSTRING(BKF.PROCESS_DT,1,10),'-')::NUMBER AS SNAPSHOT_DATE_KEY,
        MD5(COALESCE(BKF.SHIP_TO_CUST_CD::STRING,'-1'))     AS DIRECT_CUSTOMER_KEY,
        MD5('-1')                                           AS INDIRECT_CUSTOMER_KEY,           
        MD5(COALESCE(BKF.END_CUST_CD::STRING,'-1'))         AS END_CUSTOMER_KEY,
        MD5(COALESCE(BKF.CORP_CD::STRING,'-1'))             AS DIRECT_CORPORATION_KEY,
        MD5(COALESCE(BKF.END_CORP::STRING,'-1'))            AS END_CORPORATION_KEY,
        MD5(COALESCE(BKF.MARKET_PN::STRING,'-1'))           AS MARKET_PRODUCT_NUMBER_KEY, 
        MD5(COALESCE(BKF.INTERNAL_PN::STRING,'-1'))         AS INTERNAL_PART_NUMBER_KEY,

        ----------------------FK CODE------------------------------
        BKF.PROCESS_DT          AS PROCESS_DATE,
        BKF.SHIP_TO_CUST_CD     AS DIRECT_CUSTOMER_CODE,
        '-1'                    AS INDIRECT_CUSTOMER_CODE,                                         
        BKF.END_CUST_CD         AS END_CUSTOMER_CODE,        
        BKF.CORP_CD             AS DIRECT_CORPORATION_CODE,
        BKF.END_CORP            AS END_CORPORATION_CODE,
        BKF.MARKET_PN           AS MARKET_PRODUCT_NUMBER,
        BKF.INTERNAL_PN         AS INTERNAL_PART_NUMBER,
        BKF.CPN  AS CUSTOMER_PART_NUMBER,
        --------------------DRIVING ATTRIBUTES------------------------
        'ON'                                AS SOURCE_OF_SALE,
        BKF.SALES_ORDER_LI_DL               AS SALES_ORDER_LINE_ITEM_DELIVERY,
        BKF.REGION  AS REGION,
        BKF.SALES_ORDER_NUM                 AS LEGACY_SALES_ORDER_NUMBER,
        BKF.SALES_ORDER_LINE::NUMERIC       AS LEGACY_SALES_ITEM_NUMBER,
        BKF.SALES_ORDER_LINE_LINE::NUMERIC  AS LEGACY_SALES_DELIVERY_NUMBER,
                
        BKF.SALES_QUOTE_NUM                 AS SALES_QUOTE_NUM,
        BKF.ORDER_TYPE_CD                   AS ORDER_TYPE_CODE,
        --------------------- OTHER ATTRIBUTES--------------------
        CASE 
            WHEN NVL(UPPER(BKF.ACTIVITY), 'XXXXXXXXXXXXX') = 'BACKLOG_ACCRUAL'
                THEN -1 * NVL (ROUND(BKF.ACCRUAL_NET_AMOUNT_USD,2), 0)
            ELSE NVL (ROUND(BKF.ACCRUAL_NET_AMOUNT_USD,2), 0)
        END  AS ACCRUAL_AMOUNT_USD,
        BKF.ACCRUAL_CATEGORY,
        BKF.ACCRUAL_COMMENTS,
        BKF.ACCRUAL_FACTOR,
        BKF.ACCRUAL_RULE_ID,
        BKF.ACCRUAL_RULE_SET,
        COALESCE(
                CASE 
                    WHEN  BKF.ACCRUAL_TRANSACTION_DATE::DATE <  '1992-01-01'::DATE
                        THEN '1992-01-01'::DATE
                    ELSE  BKF.ACCRUAL_TRANSACTION_DATE::DATE   
                END
            ,'1960-01-01')::DATE   AS ACCRUAL_TRANSACTION_DATE,
        BKF.ACCRUAL_TYPE  AS ACCRUAL_TYPE,
        CASE 
            WHEN UPPER(BKF.ACTIVITY) = 'BACKLOG_ACCRUAL' 
                THEN 'Backlog Accrual' 
            WHEN BKF.DLVRY_STATUS_CD = 'RL'   AND BKF.LINE_LINE_STATUS_FORECAST = 'SC' 
                THEN 'Pick Released.' 
            WHEN BKF.DLVRY_STATUS_CD = 'RL'   AND BKF.LINE_LINE_STATUS_FORECAST = 'RL' 
                THEN 'Pick Released.'
            WHEN BKF.DLVRY_STATUS_CD = 'SC'   AND BKF.LINE_LINE_STATUS_FORECAST = 'RL' 
                THEN 'Scheduled Backlog.' 
            ELSE ACTIVITY 
        END ACTIVITY, 
        BKF.LCL_GROSS_AMT           AS BACKLOG_GROSS_USD,
        BKF.LCL_GROSS_AMT / EUR.EXCHANGE_RATE       AS BACKLOG_GROSS_EUR,
        BKF.LCL_GROSS_AMT / JPY.EXCHANGE_RATE       AS BACKLOG_GROSS_JPY,

        BKF.LCL_NET_AMT             AS BACKLOG_NET_USD,
        BKF.LCL_NET_AMT / EUR.EXCHANGE_RATE         AS BACKLOG_NET_EUR,
        BKF.LCL_NET_AMT / JPY.EXCHANGE_RATE         AS BACKLOG_NET_JPY,

        BKF.NET_QTY                 AS BACKLOG_NET_QUANTITY,
        BKF.BILL_SOURCE_CD          AS BILL_SOURCE_CODE,
        COALESCE(TRY_TO_BOOLEAN(BKF.BLANKET_ORDER_FLAG),FALSE)::BOOLEAN   AS IS_BLANKET_ORDER,
        BKF.BOOKING_AND_BILLING_CD  AS BOOKING_AND_BILLING_CODE,
        BKF.TRX_CATEGORY            AS BOOKING_CATEGORY,
        COALESCE(TRY_TO_BOOLEAN(BKF.TBSA_BOOKING_FLG),FALSE)::BOOLEAN AS IS_BOOKING,
        BKF.COI                     AS CUSTOMER_OF_INTEREST,
        BKF.CONTRACT_CURRENCY       AS CONTRACT_CURRENCY,
        BKF.ACC_NET_AMT_CONTRACT_CURRENCY   AS ACCRUAL_AMOUNT_CONTRACT_CURRENCY,
        BKF.GROSS_AMT_CONTRACT_CURRENCY     AS GROSS_AMOUNT_CONTRACT_CURRENCY,
        BKF.NET_AMT_CONTRACT_CURRENCY       AS BACKLOG_NET_AMOUNT_CONTRACT_CURRENCY,
        COALESCE(BKF.CRD_DT,'1960-01-01'::DATE) AS CUSTOMER_REQUESTED_DATE,
        CASE 
            WHEN BKF.CRD_DT::DATE <= BKF.PROCESS_DT::DATE 
                THEN 1 
            ELSE 0 
        END::BOOLEAN        AS IS_CRD_DELQ,
        BKF.CREDIT_ACCOUNT  AS CREDIT_ACCOUNT,
        COALESCE(
                CASE 
                        WHEN  BKF.CRSD_DT::DATE <  '1992-01-01'::DATE
                            THEN '1992-01-01'::DATE
                        ELSE  BKF.CRSD_DT::DATE   
                END 
            ,'1960-01-01'::DATE)    AS REQUESTED_SHIP_DATE,
        CASE 
            WHEN BKF.CRSD_DT::DATE <= BKF.PROCESS_DT::DATE 
                THEN 1 
            ELSE 0 
        END::BOOLEAN        AS IS_CRSD_DELQ,
        BKF.CSR             AS CUSTOMER_SERVICE_REPRESENTATIVE,
        BKF.TRANSACTION_CURRENCY    AS TRANSACTION_CURRENCY_ISO_CODE,
        BKF.CUSPA_NUMBER            AS CUSTOMER_PA_NUMBER,
        BKF.CUST_PO_NUMBER          AS CUSTOMER_PO_NUMBER,
        BKF.CUST_RECPT_BANK_CD      AS CUSTOMER_RECIEPT_BANK_CODE,
        BKF.DEBIT_ACCOUNT           AS DEBIT_ACCOUNT,
        BKF.DELIVERY_REQUEST_DATE   AS DELIVERY_REQUEST_DATE,
        BKF.DELIVERY_SOURCE_CD      AS DELIVERY_SOURCE_CD,
        BKF.DELVRY_HOLD_STATUS      AS ORDER_DELIVERY_HOLD_STATUS,
        BKF.DEMAND_BANK             AS DEMAND_BANK,
        BKF.DEMAND_CLASS            AS DEMAND_CLASS,
        BKF.DEMAND_TYPE             AS DEMAND_TYPE,
        BKF.DLVRY_STATUS_DTME       AS ORDER_DELIVERY_STATUS_DTME,
        BKF.ENTRY_DT                AS ENTRY_DATE,
        COALESCE(
                CASE 
                    WHEN  BKF.EPSD_DT::DATE <  '1992-01-01'::DATE
                        THEN '1992-01-01'::DATE
                    ELSE  BKF.EPSD_DT::DATE   
                END
            ,'1960-01-01'::DATE)    AS EARLIEST_POSSIBLE_SHIP_DATE,
        BKF.FMS_SERVICE_PROGRAM     AS FMS_SERVICE_PROGRAM,
        BKF.HANDLING_CODE           AS HANDLING_CODE,
        BKF.HDR_HOLD_STATUS         AS ORDER_HDR_HOLD_STATUS,
        BKF.INVENTORY_INSURANCE_COVERAGE  AS INVENTORY_INSURANCE_COVERAGE,
        BKF.INVOICE_NUM             AS INVOICE_NUM,
        BKF.INVOICED_QUANTITY       AS INVOICED_QUANTITY,
        BKF.ITM_HOLD_STATUS         AS ORDER_ITM_HOLD_STATUS,
        BKF.JOURNAL_DESCRIPTION     AS JOURNAL_DESCRIPTION,
        BKF.LIABILITY_AGREEMENT     AS LIABILITY_AGREEMENT,
        BKF.LINE_STATUS             AS ORDER_LINE_STATUS,
        COALESCE(
                CASE 
                    WHEN  COALESCE(BKF.RSD_DT, BKF.MSD_DT)::DATE <  '1992-01-01'::DATE
                        THEN '1992-01-01'::DATE
                ELSE  COALESCE(BKF.RSD_DT, BKF.MSD_DT)::DATE   
                END
            ,'1960-01-01')::DATE    AS MANUFACTURER_RESCHEDULED_SHIP_DATE,
        CASE 
            WHEN COALESCE(BKF.RSD_DT, BKF.MSD_DT)::DATE <= PROCESS_DT::DATE 
                THEN 1 
            ELSE 0 
        END::BOOLEAN                AS IS_MRSD_DELQ,
        COALESCE(
            CASE 
                WHEN  BKF.MSD_DT::DATE <  '1992-01-01'::DATE
                    THEN '1992-01-01'::DATE
                ELSE  BKF.MSD_DT::DATE   
            END
            ,'1960-01-01')::DATE    AS  ORIGINAL_SCHEDULED_SHIP_DATE,
        CASE 
            WHEN BKF.MSD_DT::DATE <= BKF.PROCESS_DT::DATE 
                THEN 1 
            ELSE 0 
        END::BOOLEAN                AS  IS_MSD_DELQ,
        BKF.NNCO_AGREEMENT_TYPE     AS NNCO_AGREEMENT_TYPE,
        CASE 
            WHEN BKF.NNCO = 'Y' 
                THEN 1 
            ELSE 0 
        END::BOOLEAN                AS IS_NNCO,
        BKF.ACCRUAL_ID              AS OBR_TRX_ID,
        BKF.OPERATING_UNIT          AS OPERATING_UNIT,
        BKF.DELIVERY_STATUS_CODE,
        BKF.ORA_LINE_NUM            AS LINE_NUMBER,
        BKF.ORA_ORDER_DLVRY_SRC_CD  AS ORDER_DLVRY_SOURCE_CODE,
        BKF.ORA_ORDER_NUM           AS ORDER_NUMBER,
        BKF.ORDER_SOURCE_CD         AS ORDER_SOURCE_CODE,
        BKF.ORDER_STATUS            AS ORDER_STATUS,
        COALESCE(
                CASE 
                    WHEN  BKF.PDD_DT::DATE <  '1992-01-01'::DATE
                        THEN '1992-01-01'::DATE
                    ELSE  BKF.PDD_DT::DATE   
                END 
            ,'1960-01-01'::DATE)    AS  PLANNED_DELIVERY_DATE ,
        CASE 
            WHEN BKF.PDD_DT::DATE <= BKF.PROCESS_DT::DATE 
                THEN 1 
            ELSE 0 
        END::BOOLEAN                AS IS_PDD_DELQ,
        BKF.PICK_QUANTITY           AS PICK_QUANTITY,
        BKF.PRICE_SOURCE            AS PRICE_SOURCE,
        COALESCE(
                CASE 
                    WHEN  BKF.RESCHEDULED_DELIVERY_DATE::DATE <  '1992-01-01'::DATE
                        THEN '1992-01-01'::DATE
                    ELSE  BKF.RESCHEDULED_DELIVERY_DATE::DATE   
                END 
            ,'1960-01-01')::DATE  AS RESCHEDULED_DELIVERY_DATE,
        CASE 
            WHEN BKF.RESCHEDULED_DELIVERY_DATE::DATE <= BKF.PROCESS_DT::DATE 
                THEN 1 
            ELSE 0 
        END::BOOLEAN              AS IS_RDD_DELQ,
        COALESCE(
                CASE 
                    WHEN  BKF.RSD_DT::DATE <  '1992-01-01'::DATE
                        THEN '1992-01-01'::DATE
                    ELSE  BKF.RSD_DT::DATE   
                END 
            ,'1960-01-01')::DATE            AS SCHEDULED_SHIPPED_DATE,

        COALESCE(TRY_TO_BOOLEAN(BKF.TBSA_SAMPLES_FLG),FALSE)::BOOLEAN   AS IS_SAMPLES,
        BKF.SHIP_CONFIRMED_QTY              AS SHIP_CONFIRMED_QTY,
        BKF.SOLD_TO_CUST_CD                 AS SOLD_TO_CUST_CODE,
        BKF.SOURCE_DEMAND_BANK              AS SOURCE_DEMAND_BANK,
        BKF.SPA_CODE                        AS SERVICE_PROGRAM_CODE,
        BKF.SPA_NAME                        AS SERVICE_PROGRAM_CUSTOMER,
        BKF.TRANSACTION_DATE                AS TRANSACTION_DATE,
        BKF.TRANSIT_DAYS                    AS TRANSIT_DAYS,
        COALESCE(TRY_TO_BOOLEAN(BKF.TRUE_BACKLOG_FLAG),FALSE)::BOOLEAN  AS IS_TRUE_BACKLOG,
        CASE 
            WHEN BKF.SHIP_TO_CUST_CD IN ('HUAPW','HUAIW','HUAQW','HUAJW','HUASW','HUARW','HUAKW','HUALW','HUAUW'
                                    ,'HUAXW','HUAMW','HUANW','HUAOW','HUABW','HUACW','HUADW','HUAEW','HUAFW'
                                    ,'HUAGW','HUAHW','HUBAW','HUCAW','HUEAW','HUFAW','HUGAW','HUAAW') 
                THEN 'Y' 
            WHEN BKF.CORP_CD='HUAW' OR BKF.END_CORP = 'HUAW' 
                THEN 'N' 
            ELSE IS_TRUE_BACKLOG
        END::BOOLEAN            AS IS_SALES_TRUE_BACKLOG,
        BKF.ACCRUAL_NET_AMOUNT  AS ACCRUAL_AMOUNT_TRANSACTION_CURRENCY,
        BKF.TRX_UNIT_PRICE      AS UNIT_PRICE_TRANSACTION_CURRENCY,
        BKF.U_PRICE_CRRT_AMT    AS UNIT_PRICE_CRRT_AMT,
        BKF.UNIT_PRICE_SOURCE_CD,
        BKF.TRX_UNIT_PRICE_USD  AS UNIT_PRICE_USD,
        BKF.TRX_UNIT_PRICE_USD / UNIT_EUR.EXCHANGE_RATE  AS UNIT_PRICE_EUR,
        BKF.TRX_UNIT_PRICE_USD / UNIT_JPY.EXCHANGE_RATE  AS UNIT_PRICE_JPY,
        COALESCE(TRY_TO_BOOLEAN(BKF.TBSA_WILL_SCHD_FLG),FALSE)::BOOLEAN  AS IS_WS_FLAG,
        BKF.BUSINESS_CLASS_CODE,
        'NON-FORECAST' AS BACKLOG_TYPE,
        BKF.BACKLOG_GROSS_AMOUNT_TRANSACTION_CURRENCY, 
        BKF.BACKLOG_NET_AMOUNT_TRANSACTION_CURRENCY, 
        BKF.ACCRUAL_STATUS,
        BKF.FILE_NAME,
        BKF.CPN_REVISION_CODE,
        BKF.ORA_DELIVERY_STATUS_CODE,
        BKF.ODM_END_CORP_CD,
        '{{V_START_DTTM}}'::TIMESTAMP_NTZ BIW_INS_DTTM ,
        '{{V_START_DTTM}}'::TIMESTAMP_NTZ BIW_UPD_DTTM ,
        {{V_BIW_BATCH_ID}} as BIW_BATCH_ID
    FROM BKLG_ACT_OBR_FORECAST BKF
    LEFT JOIN FISCAL_MONTH FM
        ON BKF.PROCESS_DT = FM.CALENDAR_DATE
    LEFT JOIN CURRENCY EUR
        ON EUR.FISCAL_MTH_NUM = FM.FISCAL_MONTH_KEY
        AND EUR.FROM_CURRENCY_CODE = BKF.TRANSACTION_CURRENCY 
        AND EUR.TO_CURRENCY_CODE  = 'EUR' 
    LEFT JOIN CURRENCY JPY
        ON JPY.FISCAL_MTH_NUM = FM.FISCAL_MONTH_KEY
        AND JPY.FROM_CURRENCY_CODE = BKF.TRANSACTION_CURRENCY  
        AND JPY.TO_CURRENCY_CODE  = 'JPY'
    LEFT JOIN CURRENCY UNIT_EUR
        ON UNIT_EUR.FISCAL_MTH_NUM = FM.FISCAL_MONTH_KEY
        AND UNIT_EUR.TO_CURRENCY_CODE  = 'EUR'
        AND UNIT_EUR.FROM_CURRENCY_CODE = 'USD'
    LEFT JOIN CURRENCY UNIT_JPY
        ON UNIT_JPY.FISCAL_MTH_NUM = FM.FISCAL_MONTH_KEY
        AND UNIT_JPY.TO_CURRENCY_CODE  = 'JPY'
        AND UNIT_JPY.FROM_CURRENCY_CODE = 'USD'        
)
SELECT 
    *,
    md5(object_construct ('col1',SNAPSHOT_DATE_KEY::string, 'col2',DIRECT_CUSTOMER_KEY::string,
    'col3',INDIRECT_CUSTOMER_KEY::string, 'col4',END_CUSTOMER_KEY::string, 'col5',DIRECT_CORPORATION_KEY::string,
    'col6',END_CORPORATION_KEY::string, 'col7',MARKET_PRODUCT_NUMBER_KEY::string, 'col8',INTERNAL_PART_NUMBER_KEY::string,
    'col9',PROCESS_DATE::string, 'col10',DIRECT_CUSTOMER_CODE::string, 'col11',INDIRECT_CUSTOMER_CODE::string,
    'col12',END_CUSTOMER_CODE::string, 'col13',DIRECT_CORPORATION_CODE::string, 'col14',END_CORPORATION_CODE::string,
    'col15',MARKET_PRODUCT_NUMBER::string, 'col16',INTERNAL_PART_NUMBER::string, 'col17',CUSTOMER_PART_NUMBER::string,
    'col18',SOURCE_OF_SALE::string, 'col19',SALES_ORDER_LINE_ITEM_DELIVERY::string, 'col20',REGION::string,
    'col21',LEGACY_SALES_ORDER_NUMBER::string, 'col22',LEGACY_SALES_ITEM_NUMBER::string, 'col23',LEGACY_SALES_DELIVERY_NUMBER::string,
    'col24',SALES_QUOTE_NUM::string, 'col25',ORDER_TYPE_CODE::string, 'col26',ACCRUAL_AMOUNT_USD::string,
    'col27',ACCRUAL_CATEGORY::string, 'col28',ACCRUAL_COMMENTS::string, 'col29',ACCRUAL_FACTOR::string, 'col30',ACCRUAL_RULE_ID::string,
    'col31',ACCRUAL_RULE_SET::string, 'col32',ACCRUAL_TRANSACTION_DATE::string, 'col33',ACCRUAL_TYPE::string, 'col34',ACTIVITY::string,
    'col35',BACKLOG_GROSS_USD::string, 'col36',BACKLOG_GROSS_EUR::string, 'col37',BACKLOG_GROSS_JPY::string,
    'col38',BACKLOG_NET_USD::string, 'col39',BACKLOG_NET_EUR::string, 'col40',BACKLOG_NET_JPY::string,
    'col41',BACKLOG_NET_QUANTITY::string, 'col42',BILL_SOURCE_CODE::string, 'col43',IS_BLANKET_ORDER::string,
    'col44',BOOKING_AND_BILLING_CODE::string, 'col45',BOOKING_CATEGORY::string, 'col46',IS_BOOKING::string,
    'col47',CUSTOMER_OF_INTEREST::string, 'col48',CONTRACT_CURRENCY::string, 'col49',ACCRUAL_AMOUNT_CONTRACT_CURRENCY::string,
    'col50',GROSS_AMOUNT_CONTRACT_CURRENCY::string, 'col51',BACKLOG_NET_AMOUNT_CONTRACT_CURRENCY::string, 'col52',CUSTOMER_REQUESTED_DATE::string,
    'col53',IS_CRD_DELQ::string, 'col54',CREDIT_ACCOUNT::string, 'col55',REQUESTED_SHIP_DATE::string, 'col56',IS_CRSD_DELQ::string,
    'col57',CUSTOMER_SERVICE_REPRESENTATIVE::string, 'col58',TRANSACTION_CURRENCY_ISO_CODE::string, 'col59',CUSTOMER_PA_NUMBER::string,
    'col60',CUSTOMER_PO_NUMBER::string, 'col61',CUSTOMER_RECIEPT_BANK_CODE::string, 'col62',DEBIT_ACCOUNT::string,
    'col63',DELIVERY_REQUEST_DATE::string, 'col64',DELIVERY_SOURCE_CD::string, 'col65',ORDER_DELIVERY_HOLD_STATUS::string,
    'col66',DEMAND_BANK::string, 'col67',DEMAND_CLASS::string, 'col68',DEMAND_TYPE::string,
    'col69',ORDER_DELIVERY_STATUS_DTME::string, 'col70',ENTRY_DATE::string, 'col71',EARLIEST_POSSIBLE_SHIP_DATE::string,
    'col72',FMS_SERVICE_PROGRAM::string, 'col73',HANDLING_CODE::string, 'col74',ORDER_HDR_HOLD_STATUS::string,
    'col75',INVENTORY_INSURANCE_COVERAGE::string, 'col76',INVOICE_NUM::string, 'col77',INVOICED_QUANTITY::string,
    'col78',ORDER_ITM_HOLD_STATUS::string, 'col79',JOURNAL_DESCRIPTION::string, 'col80',LIABILITY_AGREEMENT::string,
    'col81',ORDER_LINE_STATUS::string, 'col82',MANUFACTURER_RESCHEDULED_SHIP_DATE::string, 'col83',IS_MRSD_DELQ::string,
    'col84',ORIGINAL_SCHEDULED_SHIP_DATE::string, 'col85',IS_MSD_DELQ::string, 'col86',NNCO_AGREEMENT_TYPE::string, 'col87',IS_NNCO::string,
    'col88',OBR_TRX_ID::string, 'col89',OPERATING_UNIT::string, 'col90',DELIVERY_STATUS_CODE::string, 'col91',LINE_NUMBER::string,
    'col92',ORDER_DLVRY_SOURCE_CODE::string, 'col93',ORDER_NUMBER::string, 'col94',ORDER_SOURCE_CODE::string, 'col95',ORDER_STATUS::string,
    'col96',PLANNED_DELIVERY_DATE::string, 'col97',IS_PDD_DELQ::string, 'col98',PICK_QUANTITY::string, 'col99',PRICE_SOURCE::string,
    'col100',RESCHEDULED_DELIVERY_DATE::string, 'col101',IS_RDD_DELQ::string, 'col102',SCHEDULED_SHIPPED_DATE::string,
    'col103',IS_SAMPLES::string, 'col104',SHIP_CONFIRMED_QTY::string, 'col105',SOLD_TO_CUST_CODE::string,
    'col106',SOURCE_DEMAND_BANK::string, 'col107',SERVICE_PROGRAM_CODE::string, 'col108',SERVICE_PROGRAM_CUSTOMER::string,
    'col109',TRANSACTION_DATE::string, 'col110',TRANSIT_DAYS::string, 'col111',IS_TRUE_BACKLOG::string,
    'col112',IS_SALES_TRUE_BACKLOG::string, 'col113',ACCRUAL_AMOUNT_TRANSACTION_CURRENCY::string,
    'col114',UNIT_PRICE_TRANSACTION_CURRENCY::string, 'col115',UNIT_PRICE_CRRT_AMT::string, 'col116',UNIT_PRICE_SOURCE_CD::string,
    'col117',UNIT_PRICE_USD::string, 'col118',UNIT_PRICE_EUR::string, 'col119',UNIT_PRICE_JPY::string, 'col120',IS_WS_FLAG::string,
    'col121',BUSINESS_CLASS_CODE::string, 'col122',BACKLOG_TYPE::string, 'col123',BACKLOG_GROSS_AMOUNT_TRANSACTION_CURRENCY::string,
    'col124',BACKLOG_NET_AMOUNT_TRANSACTION_CURRENCY::string, 'col125',ACCRUAL_STATUS::string, 'col126',FILE_NAME::string, 'col127',CPN_REVISION_CODE::string,
    'col128',ORA_DELIVERY_STATUS_CODE::string, 'col129',ODM_END_CORP_CD::string)::string )::BINARY as BIW_MD5_KEY
FROM FINAL_SQL