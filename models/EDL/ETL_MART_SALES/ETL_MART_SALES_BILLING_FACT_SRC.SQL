/*---------------------------------------------------------------------------
Command to run model:
--dbt run --select ETL_MART_SALES_BILLING_FACT_SRC --vars 'is_backfill: True'

Version     Date            Author             Description
-------     --------        -----------        ----------------------------------
1.0         10/18/2022      Sruthi Kasbe       Updated customer columns and its order
2.0         12/16/2022      Vinay Subramanian  Corrected Currency_exchange logic
3.0         02/10/2023      Vinay Subramanian  Replaced Currency_exchange logic with Mart_currency
---------------------------------------------------------------------------*/
{################# EDW Job Template Variables #################}
{%-set v_pk_list = ['BILLING_KEY']-%}
{%-set v_house_keeping_column = ['BIW_INS_DTTM','BIW_UPD_DTTM','BIW_BATCH_ID','BIW_MD5_KEY']-%}
/*--DBT Variable used during development*/
{% if is_incremental() %}
{%-set v_all_column_list =  edw_get_column_list( this ) -%}
{%-set v_update_column_list = edw_get_quoted_column_list( this ,v_pk_list|list + ['BIW_INS_DTTM']|list) -%}
{%-set v_md5_column_list =  edw_get_md5_column_list( this ,v_pk_list|list+ v_house_keeping_column|list ) -%}
/*--DBT Variable*/
/*--SELECT {{v_all_column_list}}*/
/*--SELECT {{v_update_column_list}}*/
/*--SELECT {{v_md5_column_list}}*/
{% endif %}

{################# Batch control insert and update SQL #################}
{%- set v_dbt_job_name = 'DBT_ETL_MART_SALES_BILLING_FACT_SRC'-%}
-- Step 1 Batch process info
{%- set v_watermark = edw_batch_control(v_dbt_job_name,config.get('schema'),config.get('aliAS') ,config.get('tags'),config.get('materialized') ) -%}
{%- set V_LWM = v_watermark[0] -%}
{%- set V_HWM = v_watermark[1] -%}
{%- set V_START_DTTM = v_watermark[2] -%}
{%- set V_BIW_BATCH_ID = v_watermark[3] -%}
{%- set v_sql_upd_success_batch = "CALL UTILITY.EDW_BATCH_SUCCESS_PROC('"~v_dbt_job_name~"')" -%}

{%- set V_EDW_DB = var('V_EDW_DEFAULT_DB') +env_var('DBT_DEP_ENV')+'.' -%}

{################# Snowflake Object Configuration #################}
{{
    config(
         description = 'Building ETL table BILLING_FACT_SRC for Sales Mart '
        ,transient=true
        ,materialized='table'
        ,schema ='ETL_MART_SALES'
        ,alias='BILLING_FACT_SRC'
        ,tags =['MART_SALES']
        ,post_hook= [v_sql_upd_success_batch]	
        )
}}

WITH FISCAL_FLAG AS(
    SELECT 
        CALENDAR_DATE,
        CASE WHEN FISCAL_WEEK_BEGIN_DATE = FISCAL_MONTH_BEGIN_DATE  THEN 'Y' ELSE 'N' END AS V_FIRST_FISCAL_WEEK_FLAG ,
        IS_BEGIN_FISCAL_WEEK AS V_SATURDAY_FLAG ,
        FISCAL_WEEK_BEGIN_DATE AS V_FISCAL_MIN_DAY_IN_WEEK,
        FISCAL_MONTH_KEY
    FROM 
        {{ source('MART', 'DATE') }}
),
BILL_ACTIVITY_ALL_OBR AS (
    SELECT 
        DISTINCT
        SALES_ORDER,
        SALES_ORDER_LINE :: NUMBER AS SALES_ORDER_LINE,
        SALES_ORDER_LINE_LINE :: NUMBER SALES_ORDER_LINE_LINE,
        COALESCE(BILL.ACCRUAL_CATEGORY, BILL.ACTIVITY) ACTIVITY,
        BILL_SOURCE_CD,
        BUSINESS_CLASS_CD,
        CORP_CD,
        CREDIT_REASON_CD,
        CREDIT_CODE_DESC,
        TRX_UNIT_PRICE,
        PRICE_SOURCE,
        TRUE_BILL_FLG,
        TRX_UNIT_PRICE_USD,
        BILL_TO_COUNTRY,
        SHIP_FROM_AREA,
        CUST_PART_NUM ,
        CUST_PO_NUM ,
        ORDER_TYPE ,
        QUOTE_ID ,
        TRX_LINE_NUM ,
        OPERATING_UNIT ,
        BATCH_ID ,
        BILL_TO_CUSTCODE ,
        BILLING_DOCUMENT_NUMBER ,
        ITEM_STATUS ,
        PART_DESCRIPTION ,
        REGION ,
        REVERSAL_REQUIRED_FLAG ,
        TRANSACTION_CURRENCY ,
        TRANSACTION_DATE ,
        ACCRUAL_ID ,
        ACCRUAL_CATEGORY ,
        JOURNAL_DESCRIPTION ,
        LEDGER ,
        ACCRUAL_DEBIT_ACCOUNT ,
        ACCRUAL_CREDIT_ACCOUNT ,
        OBR_RULESET ,
        ACCRUAL_COMMENTS ,
        ACCRUAL_TYPE ,
        ACCRUAL_FACTOR ,
        ACCRUAL_FLAG,
        OBR_RULEID ,
        ACCRUAL_TRANSACTION_DATE ,
        GL_REV_ACCT,
        CUSTOMER_TRX_ID,
        CUSTOMER_TRX_LINE_ID,
        GL_POSTED_DATE,
        ORIGINAL_DOCUMENT_NUM,
        QUANTITY_OVERRIDE_FLAG,
        BU ,
        SUB_CORP_CD ,
        SHIP_TO_CUST_CD,
        CASE 
            WHEN UPPER(ACTIVITY) = 'MANUAL_ADJUSTMENT' 
                THEN PROCESS_DT
            WHEN FF.V_FIRST_FISCAL_WEEK_FLAG = 'N' AND FF.V_SATURDAY_FLAG='N' AND PROCESS_DT < FF.V_FISCAL_MIN_DAY_IN_WEEK 
                THEN FF.V_FISCAL_MIN_DAY_IN_WEEK
            ELSE PROCESS_DT 
        END PROCESS_DT,  
        ACCRUAL_NET_AMOUNT,
        INTERNAL_PN,
        PART_ID,
        PTI3,
        PTI4,
        TRX_AMT,
        QTY,
        ACCRUAL_NET_AMOUNT_USD,
        TRX_AMT_USD,
        ACC_NET_AMT_CONTRACT_CURRENCY,
        CONTRACT_CURRENCY,
        TRX_AMT_CONTRACT_CURRENCY,
        BIW_UPD_DTTM
    FROM
        {{ source('STG_EBS_APPS', 'BILL_ACTIVITY_ALL_OBR') }} BILL
        LEFT JOIN FISCAL_FLAG FF 
            ON BILL.PROCESS_DT = FF.CALENDAR_DATE
    WHERE 
    {% if var('is_backfill') %}
        BIW_UPD_DTTM >= '{{var('refresh_start_ts')}}'
		AND BIW_UPD_DTTM < '{{V_START_DTTM}}'
    {% else %}
        BIW_UPD_DTTM >= '{{V_LWM}}' 
		AND BIW_UPD_DTTM < '{{V_HWM}}'
    {% endif %}       
),
ACTIVITY_MATRIX_LKP AS (
    SELECT 
        RSN_CD ,
        BKLG_BILL_ACT_DESC,
        CATEGORY_DESC,
        BKLG_BILL_RSN_DESC
    FROM 
        {{source('STG_ONE_STAGE','ACTIVITY_MATRIX_LKP')}}
    WHERE UPPER(BKLG_BILL_DESC) ='BILLING'
    QUALIFY (ROW_NUMBER() OVER (PARTITION BY BKLG_BILL_ACT_DESC ORDER BY BKLG_BILL_ACT_ID DESC,BIW_UPD_DTTM DESC )=1)
),
ORDER_HDR AS(
    SELECT 
    SALES_ORDER_NUM, -- HAVE REGION CODE
    BPO_FLAG,
    DIST_END_CUST_CD, --- NOT APPLYING ORACLE SUBSTRING (1,17)
    SUBSTR(END_CUST_CD,1,4) AS CUST_IF_END,
    HANDLING_METHOD_CD AS HANDLING_CODE,
    ORA_ORDER_TYPE,
    SUBSTRING(ORDER_SOURCE_CD,1,1) AS ORDER_SOURCE,
    ORDER_TYPE
    FROM {{source('STG_EBS_APPS','ORDER_HDR')}}
 QUALIFY (ROW_NUMBER() OVER(PARTITION BY SALES_ORDER_NUM  ORDER BY BIW_UPD_DTTM DESC )=1)     
),
ORDER_DELIVERY AS
(
SELECT 
    ORDRPROC_REGION_CD AS REGION_ID,
    SALES_ORDER_NUM AS SALES_ORDER_NUMBER,
    SALES_ITEM_NUM AS ORDER_ITEM_SEQ_NUMBER,
    SALES_DELIVERY_NUM AS DELIVERY_SEQ_NUMBER,
    COI,
    CREATE_DTME AS CREATE_TIMESTAMP,
    CUST_PART_ID AS CPN,
    DEMAND_BANK_CD AS DEMAND_BANK,
    SALES_QUOTE_NUM,
    SUBSTR(CUSPA_NUMBER,1,11) CUS_PA_NUM,
    CUST_RECPT_BANK_CD AS CUSTOMER_RECEIPT_BANK,
    DEMAND_CLASS,
    DLVRY_STATUS_DTME,
    EARLIEST_SHIP_DT AS EARLIEST_POSSIBLE_DATE,
    SUBSTR(END_CUST_CD,1,4) AS END_CORP,
    NNCO,
    NNCO_AGREEMENT_TYPE,
    ODM_END_CORP_CD,
    ORA_DLVRY_STATUS_CD,
    SALES_ITEM_NUM||'.'||ORA_SHIPMENT_NUM AS ORA_LINE_NUM,
    ORA_ORDER_DLVRY_SRC_CD,
    ORA_ORDER_NUM,
    SUBSTR(ORDR_DLVRY_SRC_TXT,1,1) AS ORDER_DELVRY_SRC_CD,
    PLANNED_DLVRY_DT AS PLANNED_DELIVERY_DATE,
    REQUESTED_DT AS REQUESTED_DATE,
    REQUESTED_SHIP_DT AS REQUESTED_SHIP_DATE,
    RESCH_DELIVERY_DT AS RESCHEDULED_DELIVERY_DATE,
    RESCH_SHIP_DT AS RESCHEDULED_SHIP_DATE,
    SCHED_DELIVERY_DT AS SCHEDULED_DELIVERY_DATE,
    NVL(SHIP_CONFIRMED_QTY ,0) AS SHIP_CONFIRM_QUANTITY,
    SUBSTR(U_PRICE_SOURCE_CD,1,1) AS UNIT_PRICE_SOURCE_CD,
    BIW_UPD_DTTM
FROM {{source('STG_EBS_APPS','ORDER_DELIVERY')}}
QUALIFY (ROW_NUMBER() OVER(PARTITION BY SALES_ORDER_NUM,SALES_ITEM_NUM,SALES_DELIVERY_NUM  ORDER BY BIW_UPD_DTTM DESC)=1)
),
ORDER_HOLD_STATUS AS 
(
SELECT 
    ORDER_HOLD_ID,
    SALES_ORDER_NUM,
    SALES_ITEM_NUM,
    SALES_DELIVERY_NUM,
    HOLD_TYPE
    FROM
        (SELECT 
            ORDER_HOLD_ID,
            SALES_ORDER_NUM,
            SALES_ITEM_NUM,
            SALES_DELIVERY_NUM,
            HOLD_TYPE,
            RELEASED_FLG,
            ORDER_LINE_ID
        FROM {{source('STG_EBS_APPS','ORDER_HOLD_STATUS')}}
        QUALIFY (ROW_NUMBER() OVER(PARTITION BY ORDER_HOLD_ID  ORDER BY BIW_UPD_DTTM DESC)=1)  
        ) 
    WHERE RELEASED_FLG = 'N'
    AND ORDER_LINE_ID IS NOT NULL
    QUALIFY (ROW_NUMBER() OVER(PARTITION BY    SALES_ORDER_NUM,    SALES_ITEM_NUM,    SALES_DELIVERY_NUM   ORDER BY ORDER_HOLD_ID DESC )=1) 
)
,ORDER_DETAIL AS
(
    SELECT 
        ORD_DLVRY.REGION_ID,
        ORD_DLVRY.SALES_ORDER_NUMBER,
        ORD_DLVRY.ORDER_ITEM_SEQ_NUMBER,
        ORD_DLVRY.DELIVERY_SEQ_NUMBER,
        ORD_HDR.BPO_FLAG,
        ORD_HDR.DIST_END_CUST_CD,    
        ORD_HDR.HANDLING_CODE,
        ORD_HDR.ORA_ORDER_TYPE,
        ORD_HDR.ORDER_SOURCE,
        ORD_HDR.ORDER_TYPE,
        ORD_HDR.CUST_IF_END,
        ORD_DLVRY.COI,
        ORD_DLVRY.CREATE_TIMESTAMP,
        ORD_DLVRY.CPN,
        ORD_DLVRY.DEMAND_BANK,
        ORD_DLVRY.SALES_QUOTE_NUM,
        ORD_DLVRY.CUS_PA_NUM,
        ORD_DLVRY.CUSTOMER_RECEIPT_BANK,
        ORD_DLVRY.DEMAND_CLASS,
        ORD_DLVRY.DLVRY_STATUS_DTME,
        ORD_DLVRY.EARLIEST_POSSIBLE_DATE,
        ORD_DLVRY.END_CORP,
        ORD_DLVRY.NNCO,
        ORD_DLVRY.NNCO_AGREEMENT_TYPE,
        ORD_DLVRY.ODM_END_CORP_CD,
        ORD_DLVRY.ORA_DLVRY_STATUS_CD,
        ORD_DLVRY.ORA_LINE_NUM,
        ORD_DLVRY.ORA_ORDER_DLVRY_SRC_CD,
        ORD_DLVRY.ORA_ORDER_NUM,
        ORD_DLVRY.ORDER_DELVRY_SRC_CD,
        ORD_DLVRY.PLANNED_DELIVERY_DATE,
        ORD_DLVRY.REQUESTED_DATE,
        ORD_DLVRY.REQUESTED_SHIP_DATE,
        ORD_DLVRY.RESCHEDULED_DELIVERY_DATE,
        ORD_DLVRY.RESCHEDULED_SHIP_DATE,
        ORD_DLVRY.SCHEDULED_DELIVERY_DATE,
        ORD_DLVRY.SHIP_CONFIRM_QUANTITY,
        ORD_DLVRY.UNIT_PRICE_SOURCE_CD,
        ORD_HLD.HOLD_TYPE AS  HOLD_STATUS ,
        ORD_DLVRY.BIW_UPD_DTTM
    FROM 
    ORDER_HDR ORD_HDR
    INNER JOIN ORDER_DELIVERY ORD_DLVRY
        ON ORD_HDR.SALES_ORDER_NUM=ORD_DLVRY.SALES_ORDER_NUMBER
    LEFT JOIN ORDER_HOLD_STATUS ORD_HLD
        ON ORD_DLVRY.SALES_ORDER_NUMBER = ORD_HLD.SALES_ORDER_NUM
        AND ORD_DLVRY.ORDER_ITEM_SEQ_NUMBER = ORD_HLD.SALES_ITEM_NUM
        AND ORD_DLVRY.DELIVERY_SEQ_NUMBER = ORD_HLD.SALES_DELIVERY_NUM
),
ORDER_HEADER_LATEST AS 
(
SELECT 
    REGION_ID,
    SALES_ORDER_NUMBER,
    BPO_FLAG,
    CUST_IF_END,
    HANDLING_CODE,
    HOLD_STATUS,
    ORDER_SOURCE,
    ORDER_TYPE,
    SUBSTRING(DIST_END_CUST_CD,1,17) AS DIST_END_CUST_CD,
    ORA_ORDER_TYPE    
FROM 
ORDER_DETAIL
QUALIFY (ROW_NUMBER() OVER(PARTITION BY  SALES_ORDER_NUMBER  ORDER BY ORDER_ITEM_SEQ_NUMBER DESC, DELIVERY_SEQ_NUMBER DESC )=1) 
),
ORDER_LINE_ITEM AS 
(
SELECT 
    REGION_ID,
    SALES_ORDER_NUMBER,
    ORDER_ITEM_SEQ_NUMBER,
    CPN,
    DEMAND_BANK,
    CUS_PA_NUM,
    DEMAND_CLASS,
    CREATE_TIMESTAMP,
    HOLD_STATUS,
    SALES_QUOTE_NUM,
    COI
FROM 
ORDER_DETAIL
QUALIFY (ROW_NUMBER() OVER(PARTITION BY  SALES_ORDER_NUMBER,ORDER_ITEM_SEQ_NUMBER  ORDER BY  DELIVERY_SEQ_NUMBER DESC )=1) 
),
CURRENCY AS
(
SELECT
    CURRENCY_KEY,
    FISCAL_MTH_NUM,
    FROM_CURRENCY_CODE,
    TO_CURRENCY_CODE,
    EXCHANGE_RATE
FROM
   {{ref('MART_CURRENCY_EXCHANGE')}}
),

FINAL_SQL AS (
SELECT     
    MD5(OBJECT_CONSTRUCT ('COL1',OBR.REGION::STRING
                        , 'COL2',OBR.SALES_ORDER::STRING
                        , 'COL3',OBR.SALES_ORDER_LINE::NUMBER::STRING
                        , 'COL4',OBR.SALES_ORDER_LINE_LINE::NUMBER ::STRING
                        , 'COL5',OBR.ACTIVITY::STRING
                        , 'COL6',OBR.ACCRUAL_ID::STRING
                        , 'COL7',OBR.CUSTOMER_TRX_ID::STRING
                        , 'COL8',OBR.CUSTOMER_TRX_LINE_ID::STRING
                        , 'COL9',OBR.PROCESS_DT::STRING
                        , 'COL10',ROW_NUMBER() OVER(PARTITION BY 
                                                    OBR.REGION,
                                                    OBR.SALES_ORDER,
                                                    OBR.SALES_ORDER_LINE,
                                                    OBR.SALES_ORDER_LINE_LINE,
                                                    OBR.ACTIVITY,
                                                    OBR.ACCRUAL_ID,
                                                    OBR.CUSTOMER_TRX_ID,
                                                    OBR.CUSTOMER_TRX_LINE_ID,
                                                    OBR.PROCESS_DT                        
                                                ORDER BY OBR.BIW_UPD_DTTM )::STRING
                        )::STRING ) AS BILLING_KEY,
    ----------------------FK KEY------------------------------
    REPLACE(SUBSTRING(OBR.PROCESS_DT,1,10),'-')::NUMBER AS BILLING_DATE_KEY, --PROCESS_FK ,
    MD5(COALESCE(SUBSTRING(OBR.SHIP_TO_CUST_CD,-5)::STRING,'-1')) AS DIRECT_CUSTOMER_KEY,--CUSTOMER_FK ,  
    DIRECT_CUSTOMER_KEY AS INDIRECT_CUSTOMER_KEY,
    MD5(COALESCE(SH.CUST_IF_END,OBR.SHIP_TO_CUST_CD,'-1')) AS END_CUSTOMER_KEY,
    MD5(COALESCE(SH.DIST_END_CUST_CD::STRING,'-1')) AS   DIST_END_CUSTOMER_KEY,
    MD5(COALESCE(OBR.CORP_CD::STRING,'-1')) AS DIRECT_CORPORATION_KEY,
    MD5(COALESCE(SOD.END_CORP::STRING,'-1')) AS END_CORPORATION_KEY,
    MD5(COALESCE(PART_ID::STRING,'-1')) AS MARKET_PRODUCT_NUMBER_KEY,
    MD5(COALESCE(CASE 
        WHEN LENGTH(OBR.INTERNAL_PN)>0 
            THEN OBR.INTERNAL_PN
        ELSE OBR.PART_ID 
    END::STRING,'-1')) AS INTERNAL_PART_NUMBER_KEY,
    ----------------------FK CODE------------------------------
    SUBSTRING(OBR.SHIP_TO_CUST_CD,-5)::STRING AS DIRECT_CUSTOMER_CODE, 
    DIRECT_CUSTOMER_CODE AS INDIRECT_CUSTOMER_CODE,
    COALESCE(SH.CUST_IF_END,OBR.SHIP_TO_CUST_CD) AS END_CUSTOMER_CODE,
    SH.DIST_END_CUST_CD AS   DIST_END_CUSTOMER_CODE,
    OBR.CORP_CD AS DIRECT_CORPORATION_CODE,
    SOD.END_CORP AS END_CORPORATION_CODE,
    OBR.PART_ID  AS MARKET_PRODUCT_NUMBER,
    CASE 
        WHEN LENGTH(OBR.INTERNAL_PN)>0 
            THEN OBR.INTERNAL_PN
        ELSE OBR.PART_ID 
    END AS INTERNAL_PART_NUMBER,
    OBR.PROCESS_DT AS PROCESS_DATE,
    --------------------DRIVING ATTRIBUTES------------------------
    'ON' AS SOURCE_OF_SALE,
    OBR.REGION ,
    OBR.REGION||OBR.SALES_ORDER AS SALES_ORDER_NUMBER,
    OBR.SALES_ORDER_LINE::NUMBER AS SALES_ITEM_NUMBER,
    OBR.SALES_ORDER_LINE_LINE::NUMBER AS SALES_DELIVERY_NUMBER,
    OBR.REGION||OBR.SALES_ORDER||'-'||
    CASE 
        WHEN LENGTH(OBR.SALES_ORDER_LINE)>2 
            THEN TO_CHAR(OBR.SALES_ORDER_LINE) 
        ELSE LPAD(OBR.SALES_ORDER_LINE,2,0) 
    END    ||'-'||
    CASE 
        WHEN LENGTH(OBR.SALES_ORDER_LINE_LINE)>2 
            THEN TO_CHAR(OBR.SALES_ORDER_LINE_LINE) 
        ELSE LPAD(OBR.SALES_ORDER_LINE_LINE,2,0) 
    END     AS SALES_ORDER_LINE_ITEM_DELIVERY,
    OBR.ORDER_TYPE ,
--------------------- OTHER ATTRIBUTES--------------------
    SH.HANDLING_CODE ,
    REPLACE(OBR.CUST_PART_NUM,'No Value',NULL) CUSTOMER_PART_NUMBER,
    SOI.CUS_PA_NUM AS CUSTOMER_PA_NUMBER,  
    DECODE (SOD.REQUESTED_DATE,to_date('01/01/0001','DD/MM/YYYY'),NULL,SOD.REQUESTED_DATE) AS REQUESTED_DATE,  
    DECODE (SOD.SCHEDULED_DELIVERY_DATE,to_date('01/01/0001','DD/MM/YYYY'),NULL,SOD.SCHEDULED_DELIVERY_DATE) AS ORIGINAL_SCHEDULED_SHIP_DATE ,           
    DECODE (SOD.RESCHEDULED_SHIP_DATE,to_date('01/01/0001','DD/MM/YYYY'),NULL,SOD.RESCHEDULED_SHIP_DATE)  AS SCHEDULED_SHIPPED_DATE,
    DECODE (SOD.EARLIEST_POSSIBLE_DATE,to_date('01/01/0001','DD/MM/YYYY'),NULL,SOD.EARLIEST_POSSIBLE_DATE) AS EARLIEST_POSSIBLE_SHIP_DATE,
    DECODE (SOD.PLANNED_DELIVERY_DATE,to_date('01/01/0001','DD/MM/YYYY'),NULL,SOD.PLANNED_DELIVERY_DATE)  AS PLANNED_DELIVERY_DATE,
    DECODE (SOD.RESCHEDULED_DELIVERY_DATE,to_date('01/01/0001','DD/MM/YYYY'),NULL,SOD.RESCHEDULED_DELIVERY_DATE)  AS RESCHEDULED_DELIVERY_DATE,
    DECODE (SOD.REQUESTED_SHIP_DATE,to_date('01/01/0001','DD/MM/YYYY'),NULL,SOD.REQUESTED_SHIP_DATE) AS REQUESTED_SHIP_DATE,
    DECODE (SOI.CREATE_TIMESTAMP,to_date('01/01/0001','DD/MM/YYYY'),NULL,SOI.CREATE_TIMESTAMP) AS ENTRY_DATE,
    SOI.COI  CUSTOMER_OF_INTEREST,
    SOD.NNCO::BOOLEAN AS IS_NNCO,
    SOD.NNCO_AGREEMENT_TYPE AS NNCO_AGREEMENT_TYPE,
    SOD.ODM_END_CORP_CD AS ODM_END_CORP_CODE,
    OBR.BILL_TO_COUNTRY ,
    OBR.BILL_TO_CUSTCODE AS BILL_TO_CUST_CODE,
    OBR.SUB_CORP_CD AS SUB_CORP_CODE,
    OBR.SHIP_FROM_AREA ,
    OBR.CUST_PO_NUM  AS CUSTOMER_PO_NUMBER,
    OBR.QUOTE_ID ,
    OBR.OPERATING_UNIT ,
    OBR.ITEM_STATUS ,
    OBR.REVERSAL_REQUIRED_FLAG ::BOOLEAN AS IS_REVERSAL_REQUIRED,
    CASE
        WHEN UPPER (OBR.ACTIVITY) = 'BILLING_ACCRUAL'
            THEN 'Billing Accrual'
        WHEN UPPER (OBR.ACTIVITY) = 'MANUAL_ADJUSTMENT'
            THEN 'Manual Adjustment'
        WHEN UPPER (OBR.ACTIVITY) = 'REVERSAL'
            THEN 'Reversal'
        ELSE OBR.ACTIVITY
    END AS ACTIVITY ,    
    CASE 
        WHEN OBR.CREDIT_REASON_CD=AML.RSN_CD AND UPPER(OBR.ACTIVITY) = UPPER(AML.BKLG_BILL_ACT_DESC) 
            THEN AML.CATEGORY_DESC
        ELSE 'UNKBILLING' 
    END   AS BOOKING_CATEGORY , 
    OBR.BILL_SOURCE_CD AS BILL_SOURCE_CODE,
    OBR.BUSINESS_CLASS_CD  AS BUSINESS_CLASS_CODE,
    OBR.CREDIT_REASON_CD AS CREDIT_REASON_CODE,
    OBR.CREDIT_CODE_DESC  AS CREDIT_CODE_DESCRIPTION,
    OBR.PRICE_SOURCE,
    OBR.GL_POSTED_DATE,
    OBR.TRANSACTION_DATE ,
    OBR.CUSTOMER_TRX_ID AS  CUSTOMER_TRANSACTION_ID,
    OBR.CUSTOMER_TRX_LINE_ID CUSTOMER_TRANSACTION_LINE_ID,
    OBR.ACCRUAL_ID  AS OBR_TRANSACTION_ID,
    OBR.TRX_LINE_NUM AS TRANSACTION_LINE_NUMBER,
    OBR.BILLING_DOCUMENT_NUMBER,
    OBR.ORIGINAL_DOCUMENT_NUM AS ORIGINAL_DOCUMENT_NUMBER,
    OBR.TRUE_BILL_FLG ::BOOLEAN AS IS_TRUE_BILL,
    OBR.GL_REV_ACCT AS GL_REVENUE_ACCOUNT,
    OBR.ACCRUAL_CATEGORY,
    OBR.JOURNAL_DESCRIPTION ,
    OBR.LEDGER ,
    OBR.ACCRUAL_DEBIT_ACCOUNT AS DEBIT_ACCOUNT,
    OBR.ACCRUAL_CREDIT_ACCOUNT AS CREDIT_ACCOUNT,
    OBR.OBR_RULESET  AS ACCRUAL_RULE_SET,
    OBR.OBR_RULEID AS ACCRUAL_RULE_ID,
    OBR.ACCRUAL_COMMENTS AS ACCRUAL_COMMENTS,
    OBR.ACCRUAL_TYPE,
    OBR.ACCRUAL_FACTOR,
    OBR.ACCRUAL_TRANSACTION_DATE,
        CASE 
        WHEN IFNULL(OBR.OBR_RULESET, '-ABC') = 'DSA'
            THEN 'Y'
        WHEN IFNULL(OBR.OBR_RULESET ,'-ABC') = 'Reversals' AND OBR.CREDIT_REASON_CD = 'GSA' 
            THEN 'Y'
        ELSE 'N'
    END ::BOOLEAN AS IS_ACCRUAL_DSA,
    DECODE(IFNULL(OBR.OBR_RULESET, '-ABC') ,'DCD', 'Y' ,'N') ::BOOLEAN AS IS_ACCRUAL_DCD,
    CASE 
        WHEN IFNULL(OBR.OBR_RULESET, '-ABC') = 'REB' 
            THEN 'Y'
        WHEN IFNULL(OBR.OBR_RULESET, '-ABC') = 'Reversals' AND OBR.CREDIT_REASON_CD IN ('CSB','CSD','CSC','CSJ') 
            THEN 'Y'
        ELSE 'N'
    END::BOOLEAN AS IS_ACCRUAL_REB,
    CASE 
        WHEN IFNULL(OBR.OBR_RULESET ,'-ABC') = 'DSC' 
            THEN 'Y'
        WHEN IFNULL(OBR.OBR_RULESET, '-ABC') = 'Reversals' AND OBR.CREDIT_REASON_CD IN ('CSH','CSM') 
            THEN 'Y'
        ELSE 'N'
    END::BOOLEAN AS IS_ACCRUAL_DSC,
    DECODE(IFNULL(OBR.OBR_RULESET ,'-ABC') ,'Reversals', 'Y' ,'N')::BOOLEAN AS IS_ACCRUAL_REVERSAL,
    COALESCE(OBR.QUANTITY_OVERRIDE_FLAG,'N') ::BOOLEAN AS IS_QUANTITY_OVERRIDE,
    OBR.TRANSACTION_CURRENCY AS TRANSACTION_CURRENCY_ISO_CODE,
    OBR.CONTRACT_CURRENCY ,
    CASE 
        WHEN OBR.ACCRUAL_FLAG='Y' 
            THEN 0
        WHEN OBR.ACCRUAL_FLAG='N' AND UPPER(OBR.ACTIVITY) = 'MANUAL_ADJUSTMENT' 
            THEN 0
        WHEN OBR.ACCRUAL_FLAG='N' AND UPPER(OBR.ACTIVITY) = 'REVERSAL' 
            THEN (-1)*IFNULL(QTY,0)
        ELSE IFNULL(QTY,0) 
    END AS BILLING_GROSS_QUANTITY,
    CASE 
        WHEN OBR.ACCRUAL_FLAG='Y'   
            THEN 0
        WHEN OBR.ACCRUAL_FLAG='N' AND UPPER(OBR.ACTIVITY) IN ('REVERSAL','MANUAL_ADJUSTMENT') 
            THEN (-1)*IFNULL(QTY,0)
        ELSE IFNULL(OBR.QTY,0) 
    END  AS BILLING_NET_QUANTITY,
    OBR.TRX_UNIT_PRICE_USD  AS UNIT_PRICE_USD,
    UNIT_PRICE_USD/EUR.EXCHANGE_RATE UNIT_PRICE_EUR,
    UNIT_PRICE_USD/JPY.EXCHANGE_RATE UNIT_PRICE_JPY,
    OBR.TRX_UNIT_PRICE AS UNIT_PRICE_TRANSACTION_CURRENCY,
    ROUND(
        CASE 
            WHEN OBR.ACCRUAL_FLAG='Y' 
                THEN 0
            WHEN OBR.ACCRUAL_FLAG='N' AND UPPER(OBR.ACTIVITY) = 'MANUAL_ADJUSTMENT' 
                THEN 0
            WHEN OBR.ACCRUAL_FLAG='N' AND UPPER(OBR.ACTIVITY) = 'REVERSAL'
                THEN IFNULL(OBR.ACCRUAL_NET_AMOUNT_USD,0)
            ELSE IFNULL(OBR.TRX_AMT_USD,0) 
        END,2) AS GROSS_AMOUNT_USD,
    CASE 
        WHEN OBR.ACCRUAL_FLAG='Y' 
            THEN 0
        WHEN OBR.ACCRUAL_FLAG='N' AND UPPER(OBR.ACTIVITY) = 'MANUAL_ADJUSTMENT' 
            THEN 0
        WHEN OBR.ACCRUAL_FLAG='N' AND UPPER(OBR.ACTIVITY) = 'REVERSAL' 
            THEN IFNULL(OBR.ACCRUAL_NET_AMOUNT,0)
        ELSE IFNULL(OBR.TRX_AMT,0) 
    END AS GROSS_AMOUNT_TRANSACTION_CURRENCY,
    CAST(GROSS_AMOUNT_TRANSACTION_CURRENCY/TRX_EUR.EXCHANGE_RATE AS NUMBER(18,4)) GROSS_AMOUNT_EUR,
    CAST(GROSS_AMOUNT_TRANSACTION_CURRENCY/TRX_JPY.EXCHANGE_RATE AS NUMBER(18,4)) GROSS_AMOUNT_JPY,
    ROUND(
    CASE 
        WHEN OBR.ACCRUAL_FLAG='Y' 
            THEN 0
        WHEN OBR.ACCRUAL_FLAG='N' AND UPPER(OBR.ACTIVITY) = 'MANUAL_ADJUSTMENT' 
            THEN 0
        WHEN OBR.ACCRUAL_FLAG='N' AND UPPER(OBR.ACTIVITY) = 'REVERSAL'          
            THEN IFNULL(OBR.ACC_NET_AMT_CONTRACT_CURRENCY,0)
        ELSE IFNULL(OBR.TRX_AMT_CONTRACT_CURRENCY,0) 
    END,2) AS GROSS_AMOUNT_CONTRACT_CURRENCY,
    ROUND(
        CASE 
            WHEN UPPER(OBR.ACTIVITY) = 'MANUAL_ADJUSTMENT' 
                THEN IFNULL(OBR.ACCRUAL_NET_AMOUNT_USD,0)
            WHEN UPPER(OBR.ACTIVITY) = 'REVERSAL'           
                THEN IFNULL(OBR.ACCRUAL_NET_AMOUNT_USD,0)
            WHEN OBR.ACCRUAL_FLAG='Y'                       
                THEN -1*IFNULL(OBR.ACCRUAL_NET_AMOUNT_USD,0)
            ELSE IFNULL(OBR.TRX_AMT_USD,0)
    END,2)  AS BILLING_NET_AMOUNT_USD,
    CASE 
        WHEN UPPER(OBR.ACTIVITY) = 'MANUAL_ADJUSTMENT'  THEN NVL(OBR.ACCRUAL_NET_AMOUNT,0)
        WHEN UPPER(OBR.ACTIVITY) = 'REVERSAL'           THEN NVL(OBR.ACCRUAL_NET_AMOUNT,0)
        WHEN OBR.ACCRUAL_FLAG='Y'                       THEN -1*NVL(OBR.ACCRUAL_NET_AMOUNT,0)
        ELSE NVL(OBR.TRX_AMT,0)
    END AS BILLING_NET_AMOUNT_TRANSACTION_CURRENCY,
    CAST(BILLING_NET_AMOUNT_TRANSACTION_CURRENCY/TRX_EUR.EXCHANGE_RATE AS NUMBER(18,4)) BILLING_NET_AMOUNT_EUR,
	CAST(BILLING_NET_AMOUNT_TRANSACTION_CURRENCY/TRX_JPY.EXCHANGE_RATE AS NUMBER(18,4)) BILLING_NET_AMOUNT_JPY,
    ROUND(
    CASE 
        WHEN UPPER(OBR.ACTIVITY) = 'MANUAL_ADJUSTMENT' 
            THEN IFNULL(OBR.ACC_NET_AMT_CONTRACT_CURRENCY,0)
        WHEN UPPER(OBR.ACTIVITY) = 'REVERSAL'           
            THEN IFNULL(OBR.ACC_NET_AMT_CONTRACT_CURRENCY,0)
        WHEN OBR.ACCRUAL_FLAG='Y'                       
            THEN -1*IFNULL(OBR.ACC_NET_AMT_CONTRACT_CURRENCY,0)
        ELSE IFNULL(OBR.TRX_AMT_CONTRACT_CURRENCY,0)
    END,2) AS BILLING_NET_AMOUNT_CONTRACT_CURRENCY,
    ROUND(
    CASE   
        WHEN UPPER(OBR.ACTIVITY) = 'REVERSAL'           
            THEN 0   
        WHEN UPPER(OBR.ACTIVITY) = 'MANUAL_ADJUSTMENT'  
            THEN IFNULL(OBR.ACCRUAL_NET_AMOUNT_USD,0)
        ELSE -1*IFNULL(OBR.ACCRUAL_NET_AMOUNT_USD,0) 
    END,2) AS ACCRUAL_AMOUNT_USD,
    CASE 
        WHEN UPPER(OBR.ACTIVITY) = 'REVERSAL' 
            THEN 0
        WHEN UPPER(OBR.ACTIVITY) = 'MANUAL_ADJUSTMENT' 
            THEN IFNULL(OBR.ACCRUAL_NET_AMOUNT,0)
        ELSE -1*IFNULL(OBR.ACCRUAL_NET_AMOUNT,0) 
    END AS ACCRUAL_AMOUNT_TRANSACTION_CURRENCY,
    ROUND(CASE 
        WHEN UPPER(ACTIVITY) = 'REVERSAL' 
            THEN 0 -- reversal accrual amt set to 0
        WHEN UPPER(ACTIVITY) = 'MANUAL_ADJUSTMENT' 
            THEN NVL(OBR.ACC_NET_AMT_CONTRACT_CURRENCY,0)
        ELSE -1*NVL(OBR.ACC_NET_AMT_CONTRACT_CURRENCY,0) 
        END,2) AS ACCRUAL_AMOUNT_CONTRACT_CURRENCY,
    '{{V_START_DTTM}}'::TIMESTAMP_NTZ BIW_INS_DTTM ,
    '{{V_START_DTTM}}'::TIMESTAMP_NTZ BIW_UPD_DTTM ,
    {{V_BIW_BATCH_ID}} AS BIW_BATCH_ID
FROM 
    BILL_ACTIVITY_ALL_OBR OBR
    LEFT JOIN ORDER_HEADER_LATEST SH
	    ON SH.SALES_ORDER_NUMBER= OBR.REGION||OBR.SALES_ORDER 
    LEFT JOIN ORDER_LINE_ITEM AS  SOI
        ON  SOI.SALES_ORDER_NUMBER = OBR.REGION||OBR.SALES_ORDER 
        AND SOI.ORDER_ITEM_SEQ_NUMBER = OBR.SALES_ORDER_LINE
    LEFT JOIN ORDER_DETAIL SOD
        ON SOD.SALES_ORDER_NUMBER = OBR.REGION||OBR.SALES_ORDER 
        AND SOD.ORDER_ITEM_SEQ_NUMBER =OBR.SALES_ORDER_LINE
        AND SOD.DELIVERY_SEQ_NUMBER=OBR.SALES_ORDER_LINE_LINE
    LEFT JOIN ACTIVITY_MATRIX_LKP AML
        ON UPPER(OBR.CREDIT_REASON_CD)=UPPER(AML.RSN_CD)
        AND UPPER(OBR.ACTIVITY)=UPPER(AML.BKLG_BILL_ACT_DESC)
        AND UPPER(OBR.CREDIT_CODE_DESC) = UPPER(AML.BKLG_BILL_RSN_DESC)
    LEFT JOIN FISCAL_FLAG FM
        ON OBR.PROCESS_DT = FM.CALENDAR_DATE
    LEFT JOIN CURRENCY EUR
        ON EUR.FISCAL_MTH_NUM = FM.FISCAL_MONTH_KEY
        AND EUR.TO_CURRENCY_CODE  = 'EUR'
        AND EUR.FROM_CURRENCY_CODE = 'USD'
    LEFT JOIN CURRENCY JPY
        ON JPY.FISCAL_MTH_NUM = FM.FISCAL_MONTH_KEY
        AND JPY.TO_CURRENCY_CODE  = 'JPY'
        AND JPY.FROM_CURRENCY_CODE = 'USD'
    LEFT JOIN CURRENCY TRX_EUR
        ON TRX_EUR.FISCAL_MTH_NUM = FM.FISCAL_MONTH_KEY
        AND TRX_EUR.TO_CURRENCY_CODE  = 'EUR'
        AND TRX_EUR.FROM_CURRENCY_CODE= OBR.TRANSACTION_CURRENCY
    LEFT JOIN CURRENCY TRX_JPY
        ON TRX_JPY.FISCAL_MTH_NUM = FM.FISCAL_MONTH_KEY
        AND TRX_JPY.TO_CURRENCY_CODE  = 'JPY'
        AND TRX_JPY.FROM_CURRENCY_CODE= OBR.TRANSACTION_CURRENCY
)
SELECT 
    STG.*,
    md5(object_construct ('col1',BILLING_DATE_KEY::string, 'col2',DIRECT_CUSTOMER_KEY::string,
    'col3',INDIRECT_CUSTOMER_KEY::string, 'col4',END_CUSTOMER_KEY::string, 'col5',DIST_END_CUSTOMER_KEY::string, 'col6',DIRECT_CORPORATION_KEY::string,
    'col7',END_CORPORATION_KEY::string, 'col8',MARKET_PRODUCT_NUMBER_KEY::string, 'col9',INTERNAL_PART_NUMBER_KEY::string, 'col10',PROCESS_DATE::string,
    'col11',DIRECT_CUSTOMER_CODE::string, 'col12',INDIRECT_CUSTOMER_CODE::string, 'col13',END_CUSTOMER_CODE::string, 'col14',DIST_END_CUSTOMER_CODE::string,
    'col15',DIRECT_CORPORATION_CODE::string, 'col16',END_CORPORATION_CODE::string, 'col17',MARKET_PRODUCT_NUMBER::string, 'col18',INTERNAL_PART_NUMBER::string,
    'col19',SOURCE_OF_SALE::string, 'col20',REGION::string, 'col21',SALES_ORDER_NUMBER::string, 'col22',SALES_ITEM_NUMBER::string,
    'col23',SALES_DELIVERY_NUMBER::string, 'col24',SALES_ORDER_LINE_ITEM_DELIVERY::string, 'col25',ORDER_TYPE::string, 'col26',HANDLING_CODE::string,
    'col27',CUSTOMER_PART_NUMBER::string, 'col28',CUSTOMER_PA_NUMBER::string, 'col29',REQUESTED_DATE::string, 'col30',ORIGINAL_SCHEDULED_SHIP_DATE::string,
    'col31',SCHEDULED_SHIPPED_DATE::string, 'col32',EARLIEST_POSSIBLE_SHIP_DATE::string, 'col33',PLANNED_DELIVERY_DATE::string,
    'col34',RESCHEDULED_DELIVERY_DATE::string, 'col35',REQUESTED_SHIP_DATE::string, 'col36',ENTRY_DATE::string, 'col37',CUSTOMER_OF_INTEREST::string,
    'col38',IS_NNCO::string, 'col39',NNCO_AGREEMENT_TYPE::string, 'col40',ODM_END_CORP_CODE::string, 'col41',BILL_TO_COUNTRY::string,
    'col42',BILL_TO_CUST_CODE::string, 'col43',SUB_CORP_CODE::string, 'col44',SHIP_FROM_AREA::string, 'col45',CUSTOMER_PO_NUMBER::string,
    'col46',QUOTE_ID::string, 'col47',OPERATING_UNIT::string, 'col48',ITEM_STATUS::string, 'col49',IS_REVERSAL_REQUIRED::string,
    'col50',ACTIVITY::string, 'col51',BOOKING_CATEGORY::string, 'col52',BILL_SOURCE_CODE::string, 'col53',BUSINESS_CLASS_CODE::string,
    'col54',CREDIT_REASON_CODE::string, 'col55',CREDIT_CODE_DESCRIPTION::string, 'col56',PRICE_SOURCE::string, 'col57',GL_POSTED_DATE::string,
    'col58',TRANSACTION_DATE::string, 'col59',CUSTOMER_TRANSACTION_ID::string, 'col60',CUSTOMER_TRANSACTION_LINE_ID::string,
    'col61',OBR_TRANSACTION_ID::string, 'col62',TRANSACTION_LINE_NUMBER::string, 'col63',BILLING_DOCUMENT_NUMBER::string,
    'col64',ORIGINAL_DOCUMENT_NUMBER::string, 'col65',IS_TRUE_BILL::string, 'col66',GL_REVENUE_ACCOUNT::string, 'col67',ACCRUAL_CATEGORY::string,
    'col68',JOURNAL_DESCRIPTION::string, 'col69',LEDGER::string, 'col70',DEBIT_ACCOUNT::string, 'col71',CREDIT_ACCOUNT::string,
    'col72',ACCRUAL_RULE_SET::string, 'col73',ACCRUAL_RULE_ID::string, 'col74',ACCRUAL_COMMENTS::string, 'col75',ACCRUAL_TYPE::string,
    'col76',ACCRUAL_FACTOR::string, 'col77',ACCRUAL_TRANSACTION_DATE::string, 'col78',IS_ACCRUAL_DSA::string, 'col79',IS_ACCRUAL_DCD::string,
    'col80',IS_ACCRUAL_REB::string, 'col81',IS_ACCRUAL_DSC::string, 'col82',IS_ACCRUAL_REVERSAL::string, 'col83',IS_QUANTITY_OVERRIDE::string,
    'col84',TRANSACTION_CURRENCY_ISO_CODE::string, 'col85',CONTRACT_CURRENCY::string, 'col86',BILLING_GROSS_QUANTITY::string, 'col87',BILLING_NET_QUANTITY::string,
    'col88',UNIT_PRICE_USD::string, 'col89',UNIT_PRICE_EUR::string, 'col90',UNIT_PRICE_JPY::string, 'col91',UNIT_PRICE_TRANSACTION_CURRENCY::string,
    'col92',GROSS_AMOUNT_USD::string, 'col93',GROSS_AMOUNT_TRANSACTION_CURRENCY::string, 'col94',GROSS_AMOUNT_EUR::string, 'col95',GROSS_AMOUNT_JPY::string,
    'col96',GROSS_AMOUNT_CONTRACT_CURRENCY::string, 'col97',BILLING_NET_AMOUNT_USD::string, 'col98',BILLING_NET_AMOUNT_TRANSACTION_CURRENCY::string,
    'col99',BILLING_NET_AMOUNT_EUR::string, 'col100',BILLING_NET_AMOUNT_JPY::string, 'col101',BILLING_NET_AMOUNT_CONTRACT_CURRENCY::string,
    'col102',ACCRUAL_AMOUNT_USD::string, 'col103',ACCRUAL_AMOUNT_TRANSACTION_CURRENCY::string, 'col104',ACCRUAL_AMOUNT_CONTRACT_CURRENCY::string)::string ) as BIW_MD5_KEY
FROM FINAL_SQL AS STG